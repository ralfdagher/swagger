{
  "swagger": "2.0",
  "info": {
    "description": "Veem Customer Domain REST API",
    "version": "0.0.1",
    "title": "Customer Domain API",
    "termsOfService": "API TOS",
    "contact": {
      "name": "Veem",
      "url": "veem.com",
      "email": "dev@veem.com"
    },
    "license": {
      "name": "license",
      "url": "License URL"
    }
  },
  "host": "dev-admin.veem.com",
  "basePath": "/",
  "tags": [
    {
      "name": "user-search-controller",
      "description": "User Search Controller"
    },
    {
      "name": "account-phone-controller",
      "description": "Account Phone Controller"
    },
    {
      "name": "account-search-controller",
      "description": "Account Search Controller"
    },
    {
      "name": "session-controller",
      "description": "Session Controller"
    },
    {
      "name": "account-contact-controller",
      "description": "Account Contact Controller"
    },
    {
      "name": "account-email-controller",
      "description": "Account Email Controller"
    },
    {
      "name": "account-status-controller",
      "description": "Account Status Controller"
    },
    {
      "name": "bank-account-admin-controller",
      "description": "Bank Account Admin Controller"
    },
    {
      "name": "account-preference-controller",
      "description": "Account Preference Controller"
    },
    {
      "name": "account-feature-controller",
      "description": "Account Feature Controller"
    },
    {
      "name": "account-verification-controller",
      "description": "Account Verification Controller"
    },
    {
      "name": "account-address-controller",
      "description": "Account Address Controller"
    },
    {
      "name": "account-controller",
      "description": "Account Controller"
    },
    {
      "name": "activity-log-controller",
      "description": "Activity Log Controller"
    },
    {
      "name": "bank-account-controller",
      "description": "Bank Account Controller"
    },
    {
      "name": "account-government-identifier-controller",
      "description": "Account Government Identifier Controller"
    },
    {
      "name": "account-address-admin-controller",
      "description": "Account Address Admin Controller"
    },
    {
      "name": "user-risk-profile-controller",
      "description": "User Risk Profile Controller"
    },
    {
      "name": "bank-account-address-controller",
      "description": "Bank Account Address Controller"
    },
    {
      "name": "user-controller",
      "description": "User Controller"
    },
    {
      "name": "no-account-info-controller",
      "description": "No Account Info Controller"
    },
    {
      "name": "permission-controller",
      "description": "Permission Controller"
    }
  ],
  "paths": {
    "/api/customers/accounts": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "getAllAccounts",
        "operationId": "getAllAccountsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "pageNumber",
            "required": false,
            "type": "string",
            "default": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "pageSize",
            "required": false,
            "type": "string",
            "default": "25"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«AccountResponse»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "createAccount",
        "operationId": "createAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewAccountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/accounts/feature/{featureId}/status/{status}": {
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "enableAccountFeatureById",
        "operationId": "enableAccountFeatureByIdUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "featureId",
            "in": "path",
            "description": "featureId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "path",
            "description": "status",
            "required": true,
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled",
              "OptOut"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/accounts/legacy/mapping/{memberId}": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "getLegacyAccountMapping",
        "operationId": "getLegacyAccountMappingUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LegacyAccountMapping"
            }
          }
        }
      }
    },
    "/api/customers/accounts/multiple": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "DEPRECATED. Use [POST] /multiple instead.",
        "operationId": "getMultipleAccountsOldUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "account_ids",
            "in": "query",
            "description": "account_ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountResponse»"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "getMultipleAccounts",
        "operationId": "getMultipleAccountsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "accountIds",
            "description": "accountIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountResponse»"
            }
          }
        }
      }
    },
    "/api/customers/accounts/multiple/email": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "getMultipleAccountsByEmail",
        "operationId": "getMultipleAccountsByEmailUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "emails",
            "description": "emails",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountResponse»"
            }
          }
        }
      }
    },
    "/api/customers/accounts/search": {
      "get": {
        "tags": [
          "account-search-controller"
        ],
        "summary": "Search accounts",
        "description": "Search based on input parameter combinations. When more than one criteria is used, the returned accounts must match each criteria (i.e. the intersection is used). All criteria checks are by substring, so partial values will work. If any criteria is less than 4 characters long (configurable in veem.search.minCharacters property), it will be treated as an exact match instead.<br><p>Any authenticated session can call this. So it only returns account information that can be exposed publicly. That is information which is okay for any other logged in user to view.",
        "operationId": "searchPublicAccountsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fname",
            "in": "query",
            "description": "fname",
            "required": false,
            "type": "string"
          },
          {
            "name": "lname",
            "in": "query",
            "description": "lname",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "phone",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "email",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "[array of accounts]",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicAccountResponse"
              }
            }
          },
          "409": {
            "description": "Not authenticated"
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "getAccount",
        "operationId": "getAccountUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "closed",
            "in": "query",
            "description": "If provided, closed accounts are returned instead of a 404 error. Cannot be true from the non-admin public endpoint.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "full",
            "in": "query",
            "description": "If provided, internal risk information is also provided. Cannot be true from the non-admin public endpoint.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Closes an account",
        "operationId": "closeAccountOldUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for closing the account",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully closed.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already closed."
          },
          "404": {
            "description": "Account cannot be found."
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "account-controller"
        ],
        "summary": "Update an account",
        "description": "Updates base account information. The primary email and phone can also be updated from here, but in a limited capacity. Use the email and phone endpoints for full access to those parts of the account.",
        "operationId": "patchAccountUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/activate": {
      "get": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "activateViaOneTimePassword",
        "operationId": "activateViaOneTimePasswordUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "token",
            "in": "query",
            "description": "token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RedirectView"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "activate",
        "operationId": "activateUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/address": {
      "get": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "getAddresses",
        "operationId": "getAddressesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string",
            "default": "active"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountAddress"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "createAddress",
        "operationId": "createAddressUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AccountAddress"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/address/{addressId}": {
      "delete": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "deleteAddress",
        "operationId": "deleteAddressUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "patchAddress",
        "operationId": "patchAddressUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountAddress"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/address/{addressId}/verify": {
      "post": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "verifyAddress",
        "operationId": "verifyAddressUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountAddress"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/ban": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Bans an account",
        "description": "Also bans the users of the account. Note: when a user is banned, their current session is logged out as well.",
        "operationId": "banAccountUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for the ban",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully banned.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already banned."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/bankaccount": {
      "get": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "getBankAccounts",
        "operationId": "getBankAccountsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string",
            "default": "active"
          },
          {
            "name": "decrypt",
            "in": "query",
            "description": "decrypt",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BankAccountResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "createBankAccount",
        "operationId": "createBankAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BankAccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/bankaccount/connect-external": {
      "post": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "connectExternalBankAccount",
        "operationId": "connectExternalBankAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "onboarding",
            "in": "query",
            "description": "onboarding",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "connectRequest",
            "description": "connectRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalBankConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalBankAccountConnectResponse"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/bankaccount/connect-external/error": {
      "post": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "connectExternalError",
        "operationId": "connectExternalErrorUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "error",
            "description": "error",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalConnectError"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/bankaccount/extauthtoken": {
      "get": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "getExternalAuthToken",
        "operationId": "getExternalAuthTokenUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalBankAuthToken"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/bankaccount/{bankAccountId}": {
      "get": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "getBankAccount",
        "operationId": "getBankAccountUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "decrypt",
            "in": "query",
            "description": "decrypt",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BankAccountResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "deleteBankAccount",
        "operationId": "deleteBankAccountUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "patchBankAccount",
        "operationId": "patchBankAccountUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BankAccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/bankaccount/{bankAccountId}/address": {
      "get": {
        "tags": [
          "bank-account-address-controller"
        ],
        "summary": "getAddresses",
        "operationId": "getAddressesUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string",
            "default": "active"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BankAccountAddress"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bank-account-address-controller"
        ],
        "summary": "createAddress",
        "operationId": "createAddressUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BankAccountAddress"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/bankaccount/{bankAccountId}/address/{bankAddressId}": {
      "delete": {
        "tags": [
          "bank-account-address-controller"
        ],
        "summary": "deleteAddress",
        "operationId": "deleteAddressUsingDELETE_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAddressId",
            "in": "path",
            "description": "bankAddressId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "bank-account-address-controller"
        ],
        "summary": "patchAddress",
        "operationId": "patchAddressUsingPATCH_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAddressId",
            "in": "path",
            "description": "bankAddressId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BankAccountAddress"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/bankaccount/{bankAccountId}/address/{bankAddressId}/verify": {
      "post": {
        "tags": [
          "bank-account-address-controller"
        ],
        "summary": "verifyAddress",
        "operationId": "verifyAddressUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAddressId",
            "in": "path",
            "description": "bankAddressId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BankAccountAddress"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/bankaccount/{bankAccountId}/verify": {
      "post": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "verifyBankAccount",
        "operationId": "verifyBankAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BankAccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/close": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Closes an account",
        "operationId": "closeAccountUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note can be provided giving a reason for closing the account",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully closed.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already closed."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/contacts": {
      "get": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Get account contacts",
        "description": "Returns all active contacts.",
        "operationId": "getContactsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountContactResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Add a contact to the account",
        "description": "Contact is associated based on the email. If there exists an account with the same email, then that account is added as a contact. All the extra contact info is ignored, in favour of use the information from the account. If there isn't an account with the same email, then a new no-account info object is created pre-filled with the provided contact info.",
        "operationId": "addContactUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountContactRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The contact was added to the account",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          },
          "400": {
            "description": "The contact email is null or empty"
          },
          "409": {
            "description": "The contact already exists"
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/contacts/populate": {
      "post": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Add account contact account",
        "description": "Adds an existing account as a contact if not already a contact.",
        "operationId": "populateContactUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactAccountId",
            "in": "query",
            "description": "contactAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The contact account was added to the account. Also if the contact already has the account contact",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          },
          "404": {
            "description": "The contact cannot be found"
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/contacts/search": {
      "get": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Search account contacts",
        "description": "Returns all active contacts which match the keyword.",
        "operationId": "searchContactsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "keyword",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountContactResponse"
              }
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Get account contact",
        "operationId": "getContactUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Remove account contact",
        "description": "Removes the association between the account and contact. The contact account or no-account info is unaffected.",
        "operationId": "removeContactUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The contact was removed from the account. Also if the contact has already been removed from the account",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          },
          "400": {
            "description": "The contact cannot be removed"
          },
          "404": {
            "description": "The contact cannot be found"
          }
        }
      },
      "patch": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Update account contact",
        "operationId": "updateContactUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountContactRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/email": {
      "get": {
        "tags": [
          "account-email-controller"
        ],
        "summary": "getEmails",
        "operationId": "getEmailsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string",
            "default": "active"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountEmail»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-email-controller"
        ],
        "summary": "createEmail",
        "operationId": "createEmailUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "emailRequest",
            "description": "emailRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountEmailRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AccountEmail"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/email/{emailId}": {
      "get": {
        "tags": [
          "account-email-controller"
        ],
        "summary": "getEmail",
        "operationId": "getEmailUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "emailId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountEmail"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account-email-controller"
        ],
        "summary": "deleteEmail",
        "operationId": "deleteEmailUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "emailId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "account-email-controller"
        ],
        "summary": "patchEmail",
        "operationId": "patchEmailUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "emailId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "emailRequest",
            "description": "emailRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountEmailRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountEmail"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/email/{emailId}/verify": {
      "post": {
        "tags": [
          "account-email-controller"
        ],
        "summary": "verifyEmail",
        "operationId": "verifyEmailUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "emailId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountEmail"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/feature": {
      "get": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "getAccountFeatures",
        "description": "list contains various feature for which customer's account is eligible",
        "operationId": "getAccountFeatureMapUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountFeatureMap"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "getAccountFeatures",
        "description": "create feature map",
        "operationId": "createFeatureMapUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "featureMap",
            "description": "featureMap",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/feature/{featureId}/status/{status}": {
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "enableAccountFeatureByIdAndAccount",
        "operationId": "enableAccountFeatureByIdAndAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "featureId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "path",
            "description": "status",
            "required": true,
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled",
              "OptOut"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/featureName/{feature}/eligible/{eligible}": {
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "alterAccountFeatureEligibilityByFeatureAndAccount",
        "operationId": "alterAccountFeatureEligibilityByFeatureAndAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "feature",
            "in": "path",
            "description": "feature",
            "required": true,
            "type": "string",
            "enum": [
              "ExternalBankAccountLinking",
              "QuickBooks",
              "Xero"
            ]
          },
          {
            "name": "eligible",
            "in": "path",
            "description": "eligible",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/featureName/{feature}/status/{status}": {
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "enableAccountFeatureByFeatureAndAccount",
        "operationId": "enableAccountFeatureByFeatureAndAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "feature",
            "in": "path",
            "description": "feature",
            "required": true,
            "type": "string",
            "enum": [
              "ExternalBankAccountLinking",
              "QuickBooks",
              "Xero"
            ]
          },
          {
            "name": "status",
            "in": "path",
            "description": "status",
            "required": true,
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled",
              "OptOut"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/note": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "Gets all the notes on an account in chronological order",
        "operationId": "getNotesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Notes are successfully returned.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountNoteResponse"
              }
            }
          },
          "400": {
            "description": "Notes cannot be retrieved."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      },
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Creates a note on an account",
        "description": "Account notes are stored in the activity log. The author of the note is the current session actor.",
        "operationId": "createNoteUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "The note to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note is successfully created.",
            "schema": {
              "$ref": "#/definitions/AccountNoteResponse"
            }
          },
          "400": {
            "description": "Note cannot be created."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/phone": {
      "get": {
        "tags": [
          "account-phone-controller"
        ],
        "summary": "getPhones",
        "operationId": "getPhonesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string",
            "default": "active"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountPhone»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-phone-controller"
        ],
        "summary": "createPhone",
        "operationId": "createPhoneUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountPhoneRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AccountPhone"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/phone/validate": {
      "post": {
        "tags": [
          "account-phone-controller"
        ],
        "summary": "validatePhoneNumber",
        "operationId": "validatePhoneNumberUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountPhoneRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/phone/{phoneId}": {
      "delete": {
        "tags": [
          "account-phone-controller"
        ],
        "summary": "deletePhone",
        "operationId": "deletePhoneUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phoneId",
            "in": "path",
            "description": "phoneId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "account-phone-controller"
        ],
        "summary": "patchPhone",
        "operationId": "patchPhoneUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phoneId",
            "in": "path",
            "description": "phoneId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountPhoneRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPhone"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/phone/{phoneId}/verify": {
      "post": {
        "tags": [
          "account-phone-controller"
        ],
        "summary": "verifyPhone",
        "operationId": "verifyPhoneUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phoneId",
            "in": "path",
            "description": "phoneId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPhone"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/preference": {
      "get": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "getPreferenceByType",
        "operationId": "getPreferenceByTypeUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string",
            "enum": [
              "Language",
              "Notification",
              "Payment",
              "Security",
              "Platform"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountPreference»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "createPreference",
        "operationId": "createPreferenceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": true,
            "type": "string",
            "enum": [
              "Language",
              "Notification",
              "Payment",
              "Security",
              "Platform"
            ]
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/preference/{preferenceId}": {
      "get": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "getPreference",
        "operationId": "getPreferenceUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "preferenceId",
            "in": "path",
            "description": "preferenceId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "patchPreference",
        "operationId": "patchPreferenceUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "preferenceId",
            "in": "path",
            "description": "preferenceId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/preference/{preferenceType}/bills": {
      "post": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "showOrHideBills",
        "operationId": "showOrHideBillsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "preferenceType",
            "in": "path",
            "description": "preferenceType",
            "required": true,
            "type": "string",
            "enum": [
              "Language",
              "Notification",
              "Payment",
              "Security",
              "Platform"
            ]
          },
          {
            "name": "hide",
            "in": "query",
            "description": "hide",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "platform",
            "in": "query",
            "description": "platform",
            "required": true,
            "type": "string",
            "enum": [
              "QuickBooks",
              "Xero",
              "NetSuite"
            ]
          },
          {
            "in": "body",
            "name": "txns",
            "description": "txns",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/preference/{preferenceType}/contacts": {
      "post": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "showOrHideContacts",
        "operationId": "showOrHideContactsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "preferenceType",
            "in": "path",
            "description": "preferenceType",
            "required": true,
            "type": "string",
            "enum": [
              "Language",
              "Notification",
              "Payment",
              "Security",
              "Platform"
            ]
          },
          {
            "name": "hide",
            "in": "query",
            "description": "hide",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "platform",
            "in": "query",
            "description": "platform",
            "required": true,
            "type": "string",
            "enum": [
              "QuickBooks",
              "Xero",
              "NetSuite"
            ]
          },
          {
            "in": "body",
            "name": "contact",
            "description": "contact",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SimpleContact"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/reopen": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Reopens an account",
        "operationId": "reopenAccountUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for reopening the account",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully reopened.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already open."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/restrict": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Restricts an account",
        "operationId": "restrictAccountUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for the restriction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully restricted.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already restricted."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/unban": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Lifts the ban on an account",
        "operationId": "unbanAccountUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for lifting the ban",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully unbanned.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is not banned."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/unrestrict": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Lifts the restriction on an account",
        "operationId": "unrestrictAccountUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for removing the restriction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully unrestricted.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is not restricted."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/accounts/{accountId}/users": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Gets all the users with access to an account",
        "description": "The roles each user has with the account are also returned",
        "operationId": "getAccountUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountUserResponse"
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "getAllAccounts",
        "operationId": "getAllAccountsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "pageNumber",
            "required": false,
            "type": "string",
            "default": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "pageSize",
            "required": false,
            "type": "string",
            "default": "25"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«AccountResponse»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "createAccount",
        "operationId": "createAccountUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewAccountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/feature/{featureId}/status/{status}": {
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "enableAccountFeatureById",
        "operationId": "enableAccountFeatureByIdUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "featureId",
            "in": "path",
            "description": "featureId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "path",
            "description": "status",
            "required": true,
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled",
              "OptOut"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/legacy/mapping/{memberId}": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "getLegacyAccountMapping",
        "operationId": "getLegacyAccountMappingUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "memberId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LegacyAccountMapping"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/multiple": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "DEPRECATED. Use [POST] /multiple instead.",
        "operationId": "getMultipleAccountsOldUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "account_ids",
            "in": "query",
            "description": "account_ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountResponse»"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "getMultipleAccounts",
        "operationId": "getMultipleAccountsUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "accountIds",
            "description": "accountIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountResponse»"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/multiple/email": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "getMultipleAccountsByEmail",
        "operationId": "getMultipleAccountsByEmailUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "emails",
            "description": "emails",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountResponse»"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/search": {
      "get": {
        "tags": [
          "account-search-controller"
        ],
        "summary": "Search accounts",
        "description": "Search based on input parameter combinations. When more than one criteria is used, the returned accounts must match each criteria (i.e. the intersection is used). All criteria checks are by substring, so partial values will work. If any criteria is less than 4 characters long (configurable in veem.search.minCharacters property), it will be treated as an exact match instead.",
        "operationId": "searchAccountsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "fname",
            "in": "query",
            "description": "fname",
            "required": false,
            "type": "string"
          },
          {
            "name": "lname",
            "in": "query",
            "description": "lname",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "phone",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "email",
            "required": false,
            "type": "string"
          },
          {
            "name": "contactUserId",
            "in": "query",
            "description": "contactUserId",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "[array of accounts]",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountResponse"
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "getAccount",
        "operationId": "getAccountUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "closed",
            "in": "query",
            "description": "If provided, closed accounts are returned instead of a 404 error. Cannot be true from the non-admin public endpoint.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "full",
            "in": "query",
            "description": "If provided, internal risk information is also provided. Cannot be true from the non-admin public endpoint.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Closes an account",
        "operationId": "closeAccountOldUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for closing the account",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully closed.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already closed."
          },
          "404": {
            "description": "Account cannot be found."
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "account-controller"
        ],
        "summary": "Update an account",
        "description": "Updates base account information. The primary email and phone can also be updated from here, but in a limited capacity. Use the email and phone endpoints for full access to those parts of the account.",
        "operationId": "patchAccountUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/activate": {
      "get": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "activateViaOneTimePassword",
        "operationId": "activateViaOneTimePasswordUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "token",
            "in": "query",
            "description": "token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RedirectView"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "activate",
        "operationId": "activateUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/activitylog": {
      "get": {
        "tags": [
          "activity-log-controller"
        ],
        "summary": "Gets the activities on an account",
        "description": "Just like activity log search, but forced to search for activities on the account. See the /activitylog/search documentation for more information.",
        "operationId": "getAccountActivitiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "activity_type_filter",
            "in": "query",
            "description": "activity_type_filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "start_date",
            "required": false,
            "type": "string",
            "default": "1970-01-01"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone_offset",
            "in": "query",
            "description": "timezone_offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "ascending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "pretty",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActivityLogListEnhancedResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "activity-log-controller"
        ],
        "summary": "createActivity",
        "operationId": "createActivityUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivityLogRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/address": {
      "get": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "getAddresses",
        "operationId": "getAddressesUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string",
            "default": "active"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountAddress"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "createAddress",
        "operationId": "createAddressUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AccountAddress"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/address/{addressId}": {
      "delete": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "deleteAddress",
        "operationId": "deleteAddressUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "patchAddress",
        "operationId": "patchAddressUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountAddress"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/address/{addressId}/verify": {
      "post": {
        "tags": [
          "account-address-controller"
        ],
        "summary": "verifyAddress",
        "operationId": "verifyAddressUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "addressId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountAddress"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/ban": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Bans an account",
        "description": "Also bans the users of the account. Note: when a user is banned, their current session is logged out as well.",
        "operationId": "banAccountUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for the ban",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully banned.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already banned."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/bankaccount": {
      "get": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "getBankAccounts",
        "operationId": "getBankAccountsUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string",
            "default": "active"
          },
          {
            "name": "decrypt",
            "in": "query",
            "description": "decrypt",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BankAccountResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "createBankAccount",
        "operationId": "createBankAccountUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BankAccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/bankaccount/connect-external": {
      "post": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "connectExternalBankAccount",
        "operationId": "connectExternalBankAccountUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "onboarding",
            "in": "query",
            "description": "onboarding",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "connectRequest",
            "description": "connectRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalBankConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalBankAccountConnectResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/bankaccount/connect-external/error": {
      "post": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "connectExternalError",
        "operationId": "connectExternalErrorUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "error",
            "description": "error",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalConnectError"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/bankaccount/extauthtoken": {
      "get": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "getExternalAuthToken",
        "operationId": "getExternalAuthTokenUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalBankAuthToken"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/bankaccount/{bankAccountId}": {
      "get": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "getBankAccount",
        "operationId": "getBankAccountUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "decrypt",
            "in": "query",
            "description": "decrypt",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BankAccountResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "deleteBankAccount",
        "operationId": "deleteBankAccountUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "patchBankAccount",
        "operationId": "patchBankAccountUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BankAccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/bankaccount/{bankAccountId}/verify": {
      "post": {
        "tags": [
          "bank-account-controller"
        ],
        "summary": "verifyBankAccount",
        "operationId": "verifyBankAccountUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BankAccountResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/banks/{bankAccountId}/txns": {
      "get": {
        "tags": [
          "bank-account-admin-controller"
        ],
        "summary": "getBankTxns",
        "operationId": "getBankTxnsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TransactionsResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/close": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Closes an account",
        "operationId": "closeAccountUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note can be provided giving a reason for closing the account",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully closed.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already closed."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/contacts": {
      "get": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Get account contacts",
        "description": "Returns all active contacts.",
        "operationId": "getContactsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountContactResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Add a contact to the account",
        "description": "Contact is associated based on the email. If there exists an account with the same email, then that account is added as a contact. All the extra contact info is ignored, in favour of use the information from the account. If there isn't an account with the same email, then a new no-account info object is created pre-filled with the provided contact info.",
        "operationId": "addContactUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountContactRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The contact was added to the account",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          },
          "400": {
            "description": "The contact email is null or empty"
          },
          "409": {
            "description": "The contact already exists"
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/contacts/populate": {
      "post": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Add account contact account",
        "description": "Adds an existing account as a contact if not already a contact.",
        "operationId": "populateContactUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactAccountId",
            "in": "query",
            "description": "contactAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The contact account was added to the account. Also if the contact already has the account contact",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          },
          "404": {
            "description": "The contact cannot be found"
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/contacts/search": {
      "get": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Search account contacts",
        "description": "Returns all active contacts which match the keyword.",
        "operationId": "searchContactsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "keyword",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountContactResponse"
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Get account contact",
        "operationId": "getContactUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Remove account contact",
        "description": "Removes the association between the account and contact. The contact account or no-account info is unaffected.",
        "operationId": "removeContactUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The contact was removed from the account. Also if the contact has already been removed from the account",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          },
          "400": {
            "description": "The contact cannot be removed"
          },
          "404": {
            "description": "The contact cannot be found"
          }
        }
      },
      "patch": {
        "tags": [
          "account-contact-controller"
        ],
        "summary": "Update account contact",
        "operationId": "updateContactUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountContactRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountContactResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/feature": {
      "get": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "getAccountFeatures",
        "description": "list contains various feature for which customer's account is eligible",
        "operationId": "getAccountFeatureMapUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountFeatureMap"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "getAccountFeatures",
        "description": "create feature map",
        "operationId": "createFeatureMapUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "featureMap",
            "description": "featureMap",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/feature/{featureId}/status/{status}": {
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "enableAccountFeatureByIdAndAccount",
        "operationId": "enableAccountFeatureByIdAndAccountUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "featureId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "path",
            "description": "status",
            "required": true,
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled",
              "OptOut"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/featureName/{feature}/eligible/{eligible}": {
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "alterAccountFeatureEligibilityByFeatureAndAccount",
        "operationId": "alterAccountFeatureEligibilityByFeatureAndAccountUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "feature",
            "in": "path",
            "description": "feature",
            "required": true,
            "type": "string",
            "enum": [
              "ExternalBankAccountLinking",
              "QuickBooks",
              "Xero"
            ]
          },
          {
            "name": "eligible",
            "in": "path",
            "description": "eligible",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/featureName/{feature}/status/{status}": {
      "post": {
        "tags": [
          "account-feature-controller"
        ],
        "summary": "enableAccountFeatureByFeatureAndAccount",
        "operationId": "enableAccountFeatureByFeatureAndAccountUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "feature",
            "in": "path",
            "description": "feature",
            "required": true,
            "type": "string",
            "enum": [
              "ExternalBankAccountLinking",
              "QuickBooks",
              "Xero"
            ]
          },
          {
            "name": "status",
            "in": "path",
            "description": "status",
            "required": true,
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled",
              "OptOut"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountFeatureMap"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/govtidentifier": {
      "get": {
        "tags": [
          "account-government-identifier-controller"
        ],
        "summary": "getIdentifiers",
        "operationId": "getIdentifiersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string",
            "default": "active"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountGovernmentIdentifier»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-government-identifier-controller"
        ],
        "summary": "createIdentifier",
        "operationId": "createIdentifierUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountGovernmentIdentifierRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AccountGovernmentIdentifier"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/govtidentifier/{identifierId}": {
      "get": {
        "tags": [
          "account-government-identifier-controller"
        ],
        "summary": "getIdentifier",
        "operationId": "getIdentifierUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "identifierId",
            "in": "path",
            "description": "identifierId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountGovernmentIdentifier"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account-government-identifier-controller"
        ],
        "summary": "patchIdentifier",
        "operationId": "patchIdentifierUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "identifierId",
            "in": "path",
            "description": "identifierId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountGovernmentIdentifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountGovernmentIdentifier"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/govtidentifier/{identifierId}/verify": {
      "post": {
        "tags": [
          "account-government-identifier-controller"
        ],
        "summary": "verifyIdentifier",
        "operationId": "verifyIdentifierUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "identifierId",
            "in": "path",
            "description": "identifierId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountGovernmentIdentifier"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/note": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "Gets all the notes on an account in chronological order",
        "operationId": "getNotesUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Notes are successfully returned.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountNoteResponse"
              }
            }
          },
          "400": {
            "description": "Notes cannot be retrieved."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      },
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Creates a note on an account",
        "description": "Account notes are stored in the activity log. The author of the note is the current session actor.",
        "operationId": "createNoteUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "The note to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note is successfully created.",
            "schema": {
              "$ref": "#/definitions/AccountNoteResponse"
            }
          },
          "400": {
            "description": "Note cannot be created."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/preference": {
      "get": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "getPreferenceByType",
        "operationId": "getPreferenceByTypeUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string",
            "enum": [
              "Language",
              "Notification",
              "Payment",
              "Security",
              "Platform"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountPreference»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "createPreference",
        "operationId": "createPreferenceUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": true,
            "type": "string",
            "enum": [
              "Language",
              "Notification",
              "Payment",
              "Security",
              "Platform"
            ]
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/preference/{preferenceId}": {
      "get": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "getPreference",
        "operationId": "getPreferenceUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "preferenceId",
            "in": "path",
            "description": "preferenceId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "patchPreference",
        "operationId": "patchPreferenceUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "preferenceId",
            "in": "path",
            "description": "preferenceId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/preference/{preferenceType}/bills": {
      "post": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "showOrHideBills",
        "operationId": "showOrHideBillsUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "preferenceType",
            "in": "path",
            "description": "preferenceType",
            "required": true,
            "type": "string",
            "enum": [
              "Language",
              "Notification",
              "Payment",
              "Security",
              "Platform"
            ]
          },
          {
            "name": "hide",
            "in": "query",
            "description": "hide",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "platform",
            "in": "query",
            "description": "platform",
            "required": true,
            "type": "string",
            "enum": [
              "QuickBooks",
              "Xero",
              "NetSuite"
            ]
          },
          {
            "in": "body",
            "name": "txns",
            "description": "txns",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/preference/{preferenceType}/contacts": {
      "post": {
        "tags": [
          "account-preference-controller"
        ],
        "summary": "showOrHideContacts",
        "operationId": "showOrHideContactsUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "preferenceType",
            "in": "path",
            "description": "preferenceType",
            "required": true,
            "type": "string",
            "enum": [
              "Language",
              "Notification",
              "Payment",
              "Security",
              "Platform"
            ]
          },
          {
            "name": "hide",
            "in": "query",
            "description": "hide",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "platform",
            "in": "query",
            "description": "platform",
            "required": true,
            "type": "string",
            "enum": [
              "QuickBooks",
              "Xero",
              "NetSuite"
            ]
          },
          {
            "in": "body",
            "name": "contact",
            "description": "contact",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SimpleContact"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountPreference"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/reopen": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Reopens an account",
        "operationId": "reopenAccountUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for reopening the account",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully reopened.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already open."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/restrict": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Restricts an account",
        "operationId": "restrictAccountUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for the restriction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully restricted.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is already restricted."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/unban": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Lifts the ban on an account",
        "operationId": "unbanAccountUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for lifting the ban",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully unbanned.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is not banned."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/unrestrict": {
      "patch": {
        "tags": [
          "account-status-controller"
        ],
        "summary": "Lifts the restriction on an account",
        "operationId": "unrestrictAccountUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for removing the restriction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully unrestricted.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account is not restricted."
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/users": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Gets all the users with access to an account",
        "description": "The roles each user has with the account are also returned",
        "operationId": "getAccountUsersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountUserResponse"
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/verification/level": {
      "patch": {
        "tags": [
          "account-verification-controller"
        ],
        "summary": "Changes the verification level of an account",
        "operationId": "changeLevelUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountVerificationLevelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account verification level is successfully changed."
          },
          "400": {
            "description": "Account verification level cannot be changed."
          },
          "404": {
            "description": "Account cannot be found."
          },
          "409": {
            "description": "Account verification level cannot be changed -- account is in an invalid state."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/verification/note": {
      "get": {
        "tags": [
          "account-verification-controller"
        ],
        "summary": "DEPRECATED. Use [GET] /api/customers/admin/accounts/{accountId}/note instead.",
        "operationId": "getNotesUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VerificationNote"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account-verification-controller"
        ],
        "summary": "DEPRECATED. Use [POST] /api/customers/admin/accounts/{accountId}/note instead.",
        "operationId": "createNoteUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "note",
            "description": "note",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationNote"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VerificationNote"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/verification/permissible": {
      "get": {
        "tags": [
          "account-verification-controller"
        ],
        "summary": "Gets the details of all the permissible verification actions",
        "description": "Returns the permissible actions given the current state of an account.",
        "operationId": "getPermissibleActionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Actions are successfully returned.",
            "schema": {
              "$ref": "#/definitions/AccountVerificationActionsResponse"
            }
          },
          "404": {
            "description": "Account cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/verification/profile": {
      "get": {
        "tags": [
          "account-verification-controller"
        ],
        "summary": "Gets the account verification profile",
        "operationId": "getProfileUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/verification/unverify": {
      "patch": {
        "tags": [
          "account-verification-controller"
        ],
        "summary": "Unverifies an account",
        "operationId": "unverifyUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A reason and note must be provided when unverifying an account. Updating the level is optional.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccountUnverifyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully unverified.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account cannot be unverified."
          },
          "404": {
            "description": "Account cannot be found."
          },
          "409": {
            "description": "Account cannot be unverified -- account is in an invalid state."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/verification/verify": {
      "patch": {
        "tags": [
          "account-verification-controller"
        ],
        "summary": "Verifies an account",
        "operationId": "verifyUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for the update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account is successfully verified.",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Account cannot be verified."
          },
          "404": {
            "description": "Account cannot be found."
          },
          "409": {
            "description": "Account cannot be verified -- account is in an invalid state."
          }
        }
      }
    },
    "/api/customers/admin/accounts/{accountId}/{bankAccountId}/balance": {
      "get": {
        "tags": [
          "bank-account-admin-controller"
        ],
        "summary": "getBankCurrentBalance",
        "operationId": "getBankCurrentBalanceUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "bankAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FundingBalance"
            }
          }
        }
      }
    },
    "/api/customers/admin/accounts/{memberId}/activitylog/legacy": {
      "post": {
        "tags": [
          "activity-log-controller"
        ],
        "summary": "createLegacyActivity",
        "operationId": "createLegacyActivityUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "memberId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivityLogLegacyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/customers/admin/activitylog/actor": {
      "get": {
        "tags": [
          "activity-log-controller"
        ],
        "summary": "getActivityActor",
        "operationId": "getActivityActorUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActivityLogActor"
            }
          }
        }
      },
      "post": {
        "tags": [
          "activity-log-controller"
        ],
        "summary": "setActivityActor",
        "operationId": "setActivityActorUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivityLogActorRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/customers/admin/activitylog/search": {
      "get": {
        "tags": [
          "activity-log-controller"
        ],
        "summary": "Search the activity log",
        "description": "The number of results returned is limited. If more activities exist than those returned, \"lastEvaluatedKey\" will have something other than \"{}\". You can use the \"last_key.\" parameter prefix to get the next batch of activities. To do that, you'll need to pass through the values from \"lastEvaluatedKey\". For each key in \"lastEvaluatedKey\", add the prefix and pass that through with its value. <p/>There may be more than one key in the \"lastEvaluatedKey\" map and you'll have to pass them all in to get the next batch. For example, when searching by actor, the activities returned are for those where both the actor or actor proxy match the actor. It does two queries and merges the results. They will more often than not have different last keys. <p/>Example 1:<p/> response: <pre>\"lastEvaluatedKey\":{\"account_id.time_created_msec\":1474416452969}</pre> next request: <pre>?last_key.account_id.time_created_msec=1474416452969</pre> <p/>Example 2:<p/> response: <pre>\"lastEvaluatedKey\":{\"actor.time_created_msec\":1474416452969, \"actor_proxy.time_created_msec\":1474416452900}</pre> next request: <pre>?last_key.actor.time_created_msec=1474416452969&last_key.actor_proxy.time_created_msec=1474416452900</pre> <p/>You'd think we could just use the time of the last activity instead of this \"last_key.\" prefix stuff, but that won't work when there are multiple activities with the same time. This implementation will always return the correct activities in the next batch.",
        "operationId": "searchActivitiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Types starting with \"BY\\_\" search for activities by actor. Types starting with \"ON\\_\" search for activities on a target.",
            "required": false,
            "type": "string",
            "enum": [
              "BY_ADMIN",
              "BY_API",
              "BY_BATCH",
              "BY_TEST",
              "BY_USER",
              "ON_ACCOUNT",
              "ON_INVOICE",
              "ON_USER",
              "ON_VERIFICATION_PROCESSOR",
              "ON_FEETIER"
            ]
          },
          {
            "name": "key",
            "in": "query",
            "description": "The actor or target id to search.",
            "required": false,
            "type": "string"
          },
          {
            "name": "activity_type_filter",
            "in": "query",
            "description": "Filters activities to include only those whose type contain this substring. This is case sensitive.<p/>Examples: <pre>ACCOUNT\\_CREATED\nACCOUNT\\_\n\\_CREATED</pre>",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Returns activities since the beginning of this day.",
            "required": false,
            "type": "string",
            "default": "1970-01-01"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Returns activities up to the end of this day. Defaults to the current day (for the timezone offset).",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone_offset",
            "in": "query",
            "description": "Defaults to the Pacific timezone.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "When true, return older activities first. When false, return newer activities first.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of activities to return. If there are more than the maximum available, see the notes above about \"lastEvaluatedKey\".",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "If true, returns pretty json that's easier to read by humans.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActivityLogListEnhancedResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/activitylog/types": {
      "get": {
        "tags": [
          "activity-log-controller"
        ],
        "summary": "getActivityTypes",
        "operationId": "getActivityTypesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCOUNT_ACTIVATED",
                  "ACCOUNT_BANNED",
                  "ACCOUNT_CLOSED",
                  "ACCOUNT_CREATED",
                  "ACCOUNT_DELETED",
                  "ACCOUNT_FEATURE_CREATED",
                  "ACCOUNT_FEATURE_UPDATED",
                  "ACCOUNT_NOTE_CREATED",
                  "ACCOUNT_RECOVERY_REQUESTED",
                  "ACCOUNT_RECOVERY_SUCCEEDED",
                  "ACCOUNT_REOPENED",
                  "ACCOUNT_RESEND_ACTIVATION",
                  "ACCOUNT_RESTRICTED",
                  "ACCOUNT_UNBANNED",
                  "ACCOUNT_UNRESTRICTED",
                  "ACCOUNT_UPDATED",
                  "ADDRESS_CREATED",
                  "ADDRESS_DELETED",
                  "ADDRESS_UPDATED",
                  "AUTHENTICATION_ROLE_ADDED",
                  "AUTHENTICATION_ROLE_REMOVED",
                  "BANK_ADDRESS_CREATED",
                  "BANK_ADDRESS_DELETED",
                  "BANK_ADDRESS_UPDATED",
                  "BANK_CREATED",
                  "BANK_DELETED",
                  "BANK_UPDATED",
                  "BUSINESS_INFO_CREATED",
                  "BUSINESS_INFO_UPDATED",
                  "CONTACT_ADDED",
                  "CONTACT_REMOVED",
                  "CONTACT_UPDATED",
                  "EMAIL_CREATED",
                  "EMAIL_DELETED",
                  "EMAIL_SENT",
                  "EMAIL_UPDATED",
                  "GOVERNMENT_IDENTIFIER_CREATED",
                  "GOVERNMENT_IDENTIFIER_DELETED",
                  "GOVERNMENT_IDENTIFIER_UPDATED",
                  "INVOICE_CANCELED",
                  "INVOICE_CLAIMED",
                  "INVOICE_CLONED",
                  "INVOICE_CLOSED",
                  "INVOICE_CREATED",
                  "INVOICE_PAID",
                  "INVOICE_PAYMENT_INITIATED",
                  "INVOICE_PAYMENT_STATUS_UPDATED",
                  "INVOICE_REFUNDED",
                  "INVOICE_REMINDED",
                  "INVOICE_SENT",
                  "INVOICE_UPDATED",
                  "LOGIN_FAILED",
                  "LOGIN_SUCCEEDED",
                  "LOGOUT_SUCCEEDED",
                  "NOTIFICATION_EVENT_CREATED",
                  "NOTIFICATION_EVENT_UPDATED",
                  "ONE_TIME_PASSWORD_SENT",
                  "ONE_TIME_PASSWORD_VERIFIED",
                  "PASSWORD_CHANGED",
                  "PAYMENT_ADJUSTMENT_MADE",
                  "PAYMENT_AUTHORIZED",
                  "PAYMENT_BATCH_CREATED",
                  "PAYMENT_BATCH_JOURNAL_STATUS_UPDATED",
                  "PAYMENT_CANCELED",
                  "PAYMENT_CLAIMED",
                  "PAYMENT_CLONED",
                  "PAYMENT_CLOSED",
                  "PAYMENT_COMPLETED",
                  "PAYMENT_CREATED",
                  "PAYMENT_CREDIT_INITIATED",
                  "PAYMENT_CREDIT_COMPLETED",
                  "PAYMENT_CREDIT_FAILED",
                  "PAYMENT_DEBIT_INITIATED",
                  "PAYMENT_DEBIT_COMPLETED",
                  "PAYMENT_DEBIT_FAILED",
                  "PAYMENT_PENDING_AUTH",
                  "PAYMENT_PROCESSING_INPROGRESS",
                  "PAYMENT_PROCESSING_NOTES_CREATED",
                  "PAYMENT_REAUTHORIZE_ATTEMPT",
                  "PAYMENT_REFUNDED",
                  "PAYMENT_REMINDED",
                  "PAYMENT_SENT",
                  "PAYMENT_UPDATED",
                  "PERSONAL_INFO_CREATED",
                  "PERSONAL_INFO_UPDATED",
                  "PHONE_CREATED",
                  "PHONE_DELETED",
                  "PHONE_UPDATED",
                  "PREFERENCE_CREATED",
                  "PREFERENCE_UPDATED",
                  "RISK_PROFILE_UPDATED",
                  "USER_ACTIVATED",
                  "USER_ADDED",
                  "USER_BANNED",
                  "USER_CREATED",
                  "USER_DELETED",
                  "USER_LOCKED",
                  "USER_REMOVED",
                  "USER_UNBANNED",
                  "USER_UNLOCKED",
                  "USER_UPDATED",
                  "VERIFICATION_DOCUMENT_CREATED",
                  "VERIFICATION_DOCUMENT_UPDATED",
                  "VERIFICATION_DOCUMENT_UPLOADED",
                  "VERIFICATION_DOCUMENT_STATUS_UPDATED",
                  "VERIFICATION_LEVEL_UPDATED",
                  "VERIFICATION_NOTE_CREATED",
                  "VERIFICATION_PROFILE_UPDATED",
                  "VERIFICATION_PROCESSOR_CREATED",
                  "VERIFICATION_PROCESSOR_CALLED_BACK",
                  "VERIFICATION_PROCESSOR_NOT_UPDATED",
                  "VERIFICATION_PROCESSOR_UPDATED",
                  "VERIFICATION_STATUS_UPDATED",
                  "FEETIER_CREATED",
                  "FEETIER_UPDATED",
                  "FEETIER_DELETED"
                ]
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/address/multiple": {
      "get": {
        "tags": [
          "account-address-admin-controller"
        ],
        "summary": "getAddressOld",
        "operationId": "getAddressOldUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_ids",
            "in": "query",
            "description": "account_ids",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountAddress»"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "account-address-admin-controller"
        ],
        "summary": "getAddress",
        "operationId": "getAddressUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "accountIds",
            "description": "accountIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«AccountAddress»"
            }
          }
        }
      }
    },
    "/api/customers/admin/authrole": {
      "post": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Update a user role",
        "description": "Admin roles require the authenticate user to have the ADMIN_ADMIN role. Account roles require the authenticate admin to have either the ADMIN role or the ACCOUNT_ADMIN role for the account in the role. The authenticated user is never allowed to change their own roles. When removing account roles, you can omit specifying the role in the request to remove all account roles at once.",
        "operationId": "updateRoleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/customers/admin/authrole/multiple": {
      "post": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Update multiple user roles",
        "description": "As long as you have permission to update each role (see the documentation for updating one role), any mixture of roles may be updated. For example, you may update the roles for a bunch of different users on an account or a bunch of accounts a user has access to. You may also update admin and account roles in the same batch.",
        "operationId": "updateRolesUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationRoleBatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/customers/admin/bankaccounts": {
      "get": {
        "tags": [
          "bank-account-admin-controller"
        ],
        "summary": "getBankAccounts",
        "operationId": "getBankAccountsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ids",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«BankAccountResponse»"
            }
          }
        }
      }
    },
    "/api/customers/admin/businesstxn/{transactionId}/activitylog": {
      "get": {
        "tags": [
          "activity-log-controller"
        ],
        "summary": "Gets the activities on a business transaction",
        "description": "Just like activity log search, but forced to search for activities on the transaction. See the /activitylog/search documentation for more information.",
        "operationId": "getBizTransactionActivitiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "transactionId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "activity_type_filter",
            "in": "query",
            "description": "activity_type_filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "start_date",
            "required": false,
            "type": "string",
            "default": "1970-01-01"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone_offset",
            "in": "query",
            "description": "timezone_offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "ascending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "pretty",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActivityLogListEnhancedResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/external/accesstokens": {
      "get": {
        "tags": [
          "bank-account-admin-controller"
        ],
        "summary": "getBankAccessTokens",
        "operationId": "getBankAccessTokensUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "account_id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«ExternalBankAuthToken»"
            }
          }
        }
      }
    },
    "/api/customers/admin/external/accesstokens/{accessTokenId}": {
      "delete": {
        "tags": [
          "bank-account-admin-controller"
        ],
        "summary": "deleteBankAccessToken",
        "operationId": "deleteBankAccessTokenUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accessTokenId",
            "in": "path",
            "description": "accessTokenId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/customers/admin/noaccount": {
      "post": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "createNoAccountInfo",
        "operationId": "createNoAccountInfoUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "noAccountInfo",
            "description": "noAccountInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      }
    },
    "/api/customers/admin/noaccount/email/{noAccountId}": {
      "get": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "getNoAccountInfo",
        "operationId": "getNoAccountInfoUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      }
    },
    "/api/customers/admin/noaccount/view": {
      "get": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "getNoAccountInfoByHash",
        "operationId": "getNoAccountInfoByHashUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secret",
            "in": "query",
            "description": "secret",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      }
    },
    "/api/customers/admin/noaccount/{noAccountId}": {
      "get": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "getNoAccountInfo",
        "operationId": "getNoAccountInfoUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "noAccountId",
            "in": "path",
            "description": "noAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      },
      "post": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "patchNoAccountInfo",
        "operationId": "patchNoAccountInfoUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "noAccountId",
            "in": "path",
            "description": "noAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      }
    },
    "/api/customers/admin/permissions/{role}": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Gets all permissions for a role",
        "operationId": "getPermissionsForRoleUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "role",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_ADMIN",
              "ACCOUNT_AGENT",
              "ACCOUNT_CLERK",
              "ACCOUNTANT",
              "ACCOUNTANT_AGENT",
              "ADMIN",
              "ADMIN_ADMIN",
              "PAYMENT_OPS",
              "SALES_MANAGER"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CREATE_PAYMENT",
                  "CREATE_MASS_PAYMENT",
                  "CREATE_PAYMENT_PROCESSING_BATCH",
                  "CREATE_SETTLEMENT_REPORT",
                  "LOGIN_AS",
                  "SEND_PAYMENT",
                  "UPDATE_ACCOUNT",
                  "UPDATE_ACCOUNT_BANK_ACCOUNT",
                  "UPDATE_ACCOUNT_CONTACT",
                  "UPDATE_ACCOUNT_DOCUMENT",
                  "UPDATE_ACCOUNT_PLATFORM_INTEGRATION",
                  "UPDATE_ACCOUNT_PRIMARY_CONTACT_USER",
                  "UPDATE_ACCOUNT_ROLE",
                  "UPDATE_ACCOUNT_VERIFICATION_PRIORITY",
                  "UPDATE_ADMIN_ROLE",
                  "UPDATE_FEE_TIER",
                  "UPDATE_PAYMENT_DOCUMENT",
                  "UPDATE_USER",
                  "VIEW_ACCOUNT",
                  "VIEW_ACCOUNT_BANK_ACCOUNT",
                  "VIEW_ACCOUNT_CONTACT",
                  "VIEW_ACCOUNT_DOCUMENT",
                  "VIEW_ACCOUNT_PLATFORM_INTEGRATION",
                  "VIEW_ACCOUNT_ROLE",
                  "VIEW_PAYMENT",
                  "VIEW_PAYMENT_DOCUMENT",
                  "VIEW_USER"
                ]
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/roles/{permission}": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Gets all roles with a permission",
        "operationId": "getRolesWithPermissionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permission",
            "in": "path",
            "description": "permission",
            "required": true,
            "type": "string",
            "enum": [
              "CREATE_PAYMENT",
              "CREATE_MASS_PAYMENT",
              "CREATE_PAYMENT_PROCESSING_BATCH",
              "CREATE_SETTLEMENT_REPORT",
              "LOGIN_AS",
              "SEND_PAYMENT",
              "UPDATE_ACCOUNT",
              "UPDATE_ACCOUNT_BANK_ACCOUNT",
              "UPDATE_ACCOUNT_CONTACT",
              "UPDATE_ACCOUNT_DOCUMENT",
              "UPDATE_ACCOUNT_PLATFORM_INTEGRATION",
              "UPDATE_ACCOUNT_PRIMARY_CONTACT_USER",
              "UPDATE_ACCOUNT_ROLE",
              "UPDATE_ACCOUNT_VERIFICATION_PRIORITY",
              "UPDATE_ADMIN_ROLE",
              "UPDATE_FEE_TIER",
              "UPDATE_PAYMENT_DOCUMENT",
              "UPDATE_USER",
              "VIEW_ACCOUNT",
              "VIEW_ACCOUNT_BANK_ACCOUNT",
              "VIEW_ACCOUNT_CONTACT",
              "VIEW_ACCOUNT_DOCUMENT",
              "VIEW_ACCOUNT_PLATFORM_INTEGRATION",
              "VIEW_ACCOUNT_ROLE",
              "VIEW_PAYMENT",
              "VIEW_PAYMENT_DOCUMENT",
              "VIEW_USER"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCOUNT_ADMIN",
                  "ACCOUNT_AGENT",
                  "ACCOUNT_CLERK",
                  "ACCOUNTANT",
                  "ACCOUNTANT_AGENT",
                  "ADMIN",
                  "ADMIN_ADMIN",
                  "PAYMENT_OPS",
                  "SALES_MANAGER"
                ]
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/user": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Creates a user",
        "description": "When creating with roles, you must have permission to assign the roles.",
        "operationId": "createUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/user/activate": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Activates a user with a one time password",
        "description": "This is for activating users who do not yet have a password",
        "operationId": "activateViaOneTimePasswordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is successfully activated."
          },
          "403": {
            "description": "Old password is incorrect -- token is either cancelled or expired."
          },
          "404": {
            "description": "User cannot be found."
          },
          "409": {
            "description": "User is not inactive. They are either already active or banned or deleted."
          }
        }
      }
    },
    "/api/customers/admin/user/reset-password": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Resets a user's password",
        "description": "If logged in, then the old password must be the current password for the user. If not logged in, the old password must be a one time password that was sent to the user.",
        "operationId": "resetPasswordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          }
        }
      }
    },
    "/api/customers/admin/user/{userId}": {
      "delete": {
        "tags": [
          "user-controller"
        ],
        "summary": "delete",
        "operationId": "deleteUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "patchUser",
        "operationId": "patchUserUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/user/{userId}/accounts": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Gets all the accounts a user has access to",
        "description": "The roles the user has with each account are also returned",
        "operationId": "getUserAccountsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserAccountResponse"
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/user/{userId}/activate": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "activate",
        "operationId": "activateUsingPATCH_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/user/{userId}/authrole": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Get all the roles for a user",
        "operationId": "listRolesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "If provided, filters by status",
            "required": false,
            "type": "string",
            "enum": [
              "active"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«UserAuthorizationRole»"
            }
          }
        }
      }
    },
    "/api/customers/admin/user/{userId}/ban": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "Bans a user",
        "description": "Logs the user out of their current session as well.",
        "operationId": "banUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for the ban",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is successfully banned.",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "User is already banned."
          },
          "404": {
            "description": "User cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/user/{userId}/lock": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "lockUser",
        "operationId": "lockUserUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/user/{userId}/riskprofile/ipaddress": {
      "get": {
        "tags": [
          "user-risk-profile-controller"
        ],
        "summary": "Gets IP addresses",
        "description": "Returns all the different IP addresses where the user has logged in from.",
        "operationId": "getIpAddressesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/customers/admin/user/{userId}/unban": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "Lifts the ban on a user",
        "operationId": "unbanUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for lifting the ban",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is successfully unbanned.",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "User is not banned."
          },
          "404": {
            "description": "User cannot be found."
          }
        }
      }
    },
    "/api/customers/admin/user/{userId}/unlock": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "unlockUser",
        "operationId": "unlockUserUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/admin/user/{usernameOrId}": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Gets a user by username or id",
        "operationId": "getUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "usernameOrId",
            "in": "path",
            "description": "usernameOrId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/authrole": {
      "post": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Update a user role",
        "description": "Admin roles require the authenticate user to have the ADMIN_ADMIN role. Account roles require the authenticate admin to have either the ADMIN role or the ACCOUNT_ADMIN role for the account in the role. The authenticated user is never allowed to change their own roles. When removing account roles, you can omit specifying the role in the request to remove all account roles at once.",
        "operationId": "updateRoleUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/customers/authrole/multiple": {
      "post": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Update multiple user roles",
        "description": "As long as you have permission to update each role (see the documentation for updating one role), any mixture of roles may be updated. For example, you may update the roles for a bunch of different users on an account or a bunch of accounts a user has access to. You may also update admin and account roles in the same batch.",
        "operationId": "updateRolesUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationRoleBatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/customers/noaccount": {
      "post": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "createNoAccountInfo",
        "operationId": "createNoAccountInfoUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "noAccountInfo",
            "description": "noAccountInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      }
    },
    "/api/customers/noaccount/email/{noAccountId}": {
      "get": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "getNoAccountInfo",
        "operationId": "getNoAccountInfoUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      }
    },
    "/api/customers/noaccount/view": {
      "get": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "getNoAccountInfoByHash",
        "operationId": "getNoAccountInfoByHashUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secret",
            "in": "query",
            "description": "secret",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      }
    },
    "/api/customers/noaccount/{noAccountId}": {
      "get": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "getNoAccountInfo",
        "operationId": "getNoAccountInfoUsingGET_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "noAccountId",
            "in": "path",
            "description": "noAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      },
      "post": {
        "tags": [
          "no-account-info-controller"
        ],
        "summary": "patchNoAccountInfo",
        "operationId": "patchNoAccountInfoUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "noAccountId",
            "in": "path",
            "description": "noAccountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NoAccountInfo"
            }
          }
        }
      }
    },
    "/api/customers/permissions/{role}": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Gets all permissions for a role",
        "operationId": "getPermissionsForRoleUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "role",
            "required": true,
            "type": "string",
            "enum": [
              "ACCOUNT_ADMIN",
              "ACCOUNT_AGENT",
              "ACCOUNT_CLERK",
              "ACCOUNTANT",
              "ACCOUNTANT_AGENT",
              "ADMIN",
              "ADMIN_ADMIN",
              "PAYMENT_OPS",
              "SALES_MANAGER"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CREATE_PAYMENT",
                  "CREATE_MASS_PAYMENT",
                  "CREATE_PAYMENT_PROCESSING_BATCH",
                  "CREATE_SETTLEMENT_REPORT",
                  "LOGIN_AS",
                  "SEND_PAYMENT",
                  "UPDATE_ACCOUNT",
                  "UPDATE_ACCOUNT_BANK_ACCOUNT",
                  "UPDATE_ACCOUNT_CONTACT",
                  "UPDATE_ACCOUNT_DOCUMENT",
                  "UPDATE_ACCOUNT_PLATFORM_INTEGRATION",
                  "UPDATE_ACCOUNT_PRIMARY_CONTACT_USER",
                  "UPDATE_ACCOUNT_ROLE",
                  "UPDATE_ACCOUNT_VERIFICATION_PRIORITY",
                  "UPDATE_ADMIN_ROLE",
                  "UPDATE_FEE_TIER",
                  "UPDATE_PAYMENT_DOCUMENT",
                  "UPDATE_USER",
                  "VIEW_ACCOUNT",
                  "VIEW_ACCOUNT_BANK_ACCOUNT",
                  "VIEW_ACCOUNT_CONTACT",
                  "VIEW_ACCOUNT_DOCUMENT",
                  "VIEW_ACCOUNT_PLATFORM_INTEGRATION",
                  "VIEW_ACCOUNT_ROLE",
                  "VIEW_PAYMENT",
                  "VIEW_PAYMENT_DOCUMENT",
                  "VIEW_USER"
                ]
              }
            }
          }
        }
      }
    },
    "/api/customers/roles/{permission}": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Gets all roles with a permission",
        "operationId": "getRolesWithPermissionUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permission",
            "in": "path",
            "description": "permission",
            "required": true,
            "type": "string",
            "enum": [
              "CREATE_PAYMENT",
              "CREATE_MASS_PAYMENT",
              "CREATE_PAYMENT_PROCESSING_BATCH",
              "CREATE_SETTLEMENT_REPORT",
              "LOGIN_AS",
              "SEND_PAYMENT",
              "UPDATE_ACCOUNT",
              "UPDATE_ACCOUNT_BANK_ACCOUNT",
              "UPDATE_ACCOUNT_CONTACT",
              "UPDATE_ACCOUNT_DOCUMENT",
              "UPDATE_ACCOUNT_PLATFORM_INTEGRATION",
              "UPDATE_ACCOUNT_PRIMARY_CONTACT_USER",
              "UPDATE_ACCOUNT_ROLE",
              "UPDATE_ACCOUNT_VERIFICATION_PRIORITY",
              "UPDATE_ADMIN_ROLE",
              "UPDATE_FEE_TIER",
              "UPDATE_PAYMENT_DOCUMENT",
              "UPDATE_USER",
              "VIEW_ACCOUNT",
              "VIEW_ACCOUNT_BANK_ACCOUNT",
              "VIEW_ACCOUNT_CONTACT",
              "VIEW_ACCOUNT_DOCUMENT",
              "VIEW_ACCOUNT_PLATFORM_INTEGRATION",
              "VIEW_ACCOUNT_ROLE",
              "VIEW_PAYMENT",
              "VIEW_PAYMENT_DOCUMENT",
              "VIEW_USER"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCOUNT_ADMIN",
                  "ACCOUNT_AGENT",
                  "ACCOUNT_CLERK",
                  "ACCOUNTANT",
                  "ACCOUNTANT_AGENT",
                  "ADMIN",
                  "ADMIN_ADMIN",
                  "PAYMENT_OPS",
                  "SALES_MANAGER"
                ]
              }
            }
          }
        }
      }
    },
    "/api/customers/user": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Creates a user",
        "description": "When creating with roles, you must have permission to assign the roles.",
        "operationId": "createUserUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/user/activate": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Activates a user with a one time password",
        "description": "This is for activating users who do not yet have a password",
        "operationId": "activateViaOneTimePasswordUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is successfully activated."
          },
          "403": {
            "description": "Old password is incorrect -- token is either cancelled or expired."
          },
          "404": {
            "description": "User cannot be found."
          },
          "409": {
            "description": "User is not inactive. They are either already active or banned or deleted."
          }
        }
      }
    },
    "/api/customers/user/reset-password": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Resets a user's password",
        "description": "If logged in, then the old password must be the current password for the user. If not logged in, the old password must be a one time password that was sent to the user.",
        "operationId": "resetPasswordUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdatePasswordRequest"
            }
          }
        }
      }
    },
    "/api/customers/user/search": {
      "get": {
        "tags": [
          "user-search-controller"
        ],
        "summary": "Search users",
        "description": "Only searches by email and will return at most 1 user. The email must be an exact match with the user to be returned.",
        "operationId": "searchPublicAccountsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "email",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "[array of users]",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/customers/user/{userId}": {
      "delete": {
        "tags": [
          "user-controller"
        ],
        "summary": "delete",
        "operationId": "deleteUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "patchUser",
        "operationId": "patchUserUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/user/{userId}/accounts": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Gets all the accounts a user has access to",
        "description": "The roles the user has with each account are also returned",
        "operationId": "getUserAccountsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserAccountResponse"
              }
            }
          }
        }
      }
    },
    "/api/customers/user/{userId}/activate": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "activate",
        "operationId": "activateUsingPATCH_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/user/{userId}/authrole": {
      "get": {
        "tags": [
          "permission-controller"
        ],
        "summary": "Get all the roles for a user",
        "operationId": "listRolesUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "If provided, filters by status",
            "required": false,
            "type": "string",
            "enum": [
              "active"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«UserAuthorizationRole»"
            }
          }
        }
      }
    },
    "/api/customers/user/{userId}/ban": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "Bans a user",
        "description": "Logs the user out of their current session as well.",
        "operationId": "banUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for the ban",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is successfully banned.",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "User is already banned."
          },
          "404": {
            "description": "User cannot be found."
          }
        }
      }
    },
    "/api/customers/user/{userId}/lock": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "lockUser",
        "operationId": "lockUserUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/user/{userId}/unban": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "Lifts the ban on a user",
        "operationId": "unbanUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "A note must be provided giving a reason for lifting the ban",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is successfully unbanned.",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "User is not banned."
          },
          "404": {
            "description": "User cannot be found."
          }
        }
      }
    },
    "/api/customers/user/{userId}/unlock": {
      "patch": {
        "tags": [
          "user-controller"
        ],
        "summary": "unlockUser",
        "operationId": "unlockUserUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/api/customers/user/{usernameOrId}": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Gets a user by username or id",
        "operationId": "getUserUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "usernameOrId",
            "in": "path",
            "description": "usernameOrId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        }
      }
    },
    "/auth": {
      "post": {
        "tags": [
          "session-controller"
        ],
        "summary": "Authenticate a new session",
        "description": "Authenticates the session with the user's credentials.<p>This does the same action as [POST] /login. The only difference is way the credentials are provided.<p>If dfp is provided in the body, updates the user's last device fingerprint setting. The device fingerprint must come from the client because this server does not have access to the client device. The expected format is the encrypted fingerprint JSON provided by Augur (https://www.augur.io/).",
        "operationId": "authUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationRequest"
            }
          },
          {
            "name": "account-id",
            "in": "query",
            "description": "If provided, use this account id if the user has access to multiple accounts. The user must have access to the account or this will fail. Can be used when the user only has access to one account as well.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "as-user",
            "in": "query",
            "description": "If provided, after authenticating the username and password, will set up the session such that this user id is the one accessing the site with the authenticated user acting as their proxy.<p>Only admin users are allowed to proxy another user.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Session is authenticated with the user.<p>The session may or may not have a current account set. It will not be set if the user does not have access to any accounts or there are too many accounts to pick one.<p>If the user has access to multiple accounts, then <code>multiAccount</code> will be true.<p>If the parameters were provided to link with a platform account and it was successful, then <code>linkSuccessful</code> will be <code>true</code>.",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "401": {
            "description": "Authentication failed with one of these reasons:<ul><li>Authentication Failed: Invalid username or password</li><li>Authentication Failed: Account is banned</li><li>Authentication Failed: Account is closed</li><li>Authentication Failed: Account is inactive</li><li>Authentication Failed: User is banned</li><li>Authentication Failed: User is inactive</li><li>Authentication Failed: User is locked</li></ul>"
          }
        }
      }
    },
    "/current": {
      "get": {
        "tags": [
          "session-controller"
        ],
        "summary": "Get the current session information",
        "operationId": "getCurrentSessionInfoUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Session is authenticated with a user.<p>May contain a proxy user. If that is the case, then the proxy user is the one who is authenticated and they are acting on behalf of the user.<p>The session may or may not have a current account set. It will not be set if the user does not have access to any accounts or there are too many accounts to pick one when logging in.<p>If the user has access to multiple accounts, then <code>multiAccount</code> will be true.",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "401": {
            "description": "Session is not authenticated with a user"
          }
        }
      },
      "post": {
        "tags": [
          "session-controller"
        ],
        "summary": "Updates the current session settings.",
        "description": "In order to successfully set the current account id, there must be a session user (i.e. user is logged in), the session user must have permission to view the account and the account must be accessible (i.e. not banned/closed/inactive). May link with a platform account here by providing the <code>platform</code> and <code>linkToken</code>. Link here if we were unable to identify which account to link with on login because there were too many options.",
        "operationId": "updateCurrentSessionInfoUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The same successful response as when you get the current session information (via /current [GET]) with an additional flag indicating if the linking with a platform was successful",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "400": {
            "description": "Account not specified"
          },
          "401": {
            "description": "Session is not authenticated with a user"
          },
          "403": {
            "description": "Account is not accessible"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "session-controller"
        ],
        "summary": "Authenticate a new session",
        "description": "Authenticates the session with the user's credentials.<p>This does the same action as [POST] /auth. The only difference is way the credentials are provided.",
        "operationId": "loginUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "password",
            "required": true,
            "type": "string"
          },
          {
            "name": "dfp",
            "in": "query",
            "description": "If provided, updates the user's last device fingerprint setting. The device fingerprint must come from the client because this server does not have access to the client device. The expected format is the encrypted fingerprint JSON provided by Augur (https://www.augur.io/).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "account-id",
            "in": "query",
            "description": "If provided, use this account id if the user has access to multiple accounts. The user must have access to the account or this will fail. Can be used when the user only has access to one account as well.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "as-user",
            "in": "query",
            "description": "If provided, after authenticating the username and password, will set up the session such that this user id is the one accessing the site with the authenticated user acting as their proxy.<p>Only admin users are allowed to proxy another user.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Session is authenticated with the user.<p>The session may or may not have a current account set. It will not be set if the user does not have access to any accounts or there are too many accounts to pick one.<p>If the user has access to multiple accounts, then <code>multiAccount</code> will be true.<p>If the parameters were provided to link with a platform account and it was successful, then <code>linkSuccessful</code> will be <code>true</code>.",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "401": {
            "description": "Authentication failed with one of these reasons:<ul><li>Authentication Failed: Invalid username or password</li><li>Authentication Failed: Account is banned</li><li>Authentication Failed: Account is closed</li><li>Authentication Failed: Account is inactive</li><li>Authentication Failed: User is banned</li><li>Authentication Failed: User is inactive</li><li>Authentication Failed: User is locked</li></ul>"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "session-controller"
        ],
        "summary": "Logout of the current session",
        "description": "If the current session is not logged in, this does nothing",
        "operationId": "logoutUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "The session is logged out"
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "_item": {
          "type": "string"
        },
        "_user": {
          "type": "string"
        },
        "balance": {
          "$ref": "#/definitions/Balance"
        },
        "institution_type": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/AccountMeta"
        },
        "numbers": {
          "$ref": "#/definitions/AccountNumbers"
        },
        "subtype": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "AccountReferralRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "campaignId": {
          "type": "string"
        },
        "gaClientId": {
          "type": "string"
        },
        "invoiceId": {
          "type": "string"
        },
        "invoiceSecret": {
          "type": "string"
        },
        "keywordId": {
          "type": "string"
        },
        "linkToken": {
          "type": "string"
        },
        "noAccountSecret": {
          "type": "string"
        },
        "partnerId": {
          "type": "string"
        },
        "paymentId": {
          "type": "string"
        },
        "paymentSecret": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        }
      }
    },
    "UserRiskProfileRequest": {
      "type": "object",
      "properties": {
        "lastDeviceFingerprint": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "lastIp": {
          "type": "string"
        },
        "profile": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Iterable«AccountPhone»": {
      "type": "object"
    },
    "DateTimeField": {
      "type": "object",
      "properties": {
        "durationField": {
          "$ref": "#/definitions/DurationField"
        },
        "leapDurationField": {
          "$ref": "#/definitions/DurationField"
        },
        "lenient": {
          "type": "boolean"
        },
        "maximumValue": {
          "type": "integer",
          "format": "int32"
        },
        "minimumValue": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "rangeDurationField": {
          "$ref": "#/definitions/DurationField"
        },
        "supported": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/DateTimeFieldType"
        }
      }
    },
    "LocalDate": {
      "type": "object",
      "properties": {
        "centuryOfEra": {
          "type": "integer",
          "format": "int32"
        },
        "chronology": {
          "$ref": "#/definitions/Chronology"
        },
        "dayOfMonth": {
          "type": "integer",
          "format": "int32"
        },
        "dayOfWeek": {
          "type": "integer",
          "format": "int32"
        },
        "dayOfYear": {
          "type": "integer",
          "format": "int32"
        },
        "era": {
          "type": "integer",
          "format": "int32"
        },
        "fieldTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateTimeFieldType"
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateTimeField"
          }
        },
        "monthOfYear": {
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "weekOfWeekyear": {
          "type": "integer",
          "format": "int32"
        },
        "weekyear": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "yearOfCentury": {
          "type": "integer",
          "format": "int32"
        },
        "yearOfEra": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Iterable«PublicAccountResponse»": {
      "type": "object"
    },
    "SessionRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "linkToken": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        }
      }
    },
    "AccountExtraBusinessRequest": {
      "type": "object",
      "properties": {
        "avgTxnSize": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "industry": {
          "type": "string",
          "enum": [
            "ArtsCraftsCollectibles",
            "BabyAndChildren",
            "BusinessProcessOutsourcing",
            "ClothingAccessoriesShoes",
            "Construction",
            "DigitalGoods",
            "Educational",
            "EntertainmentAndMedia",
            "Events",
            "Financial",
            "FoodAndBeverage",
            "Government",
            "HealthAndBeauty",
            "ITWebAndInternet",
            "Insurance",
            "Manufacturing",
            "Maritime",
            "Medical",
            "Memberships",
            "Music",
            "Networking",
            "NonProfit",
            "PetsAndAnimals",
            "PrintingAndPublishing",
            "RealEstate",
            "ReligionAndSpirituality",
            "Retail",
            "Services",
            "SportsAndOutdoors",
            "SupplyChain",
            "Telecommunications",
            "Transportation",
            "TravelAndLeisure",
            "Utilities",
            "Wholesale"
          ]
        },
        "legacyTimeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subIndustry": {
          "type": "string",
          "enum": [
            "Accessories",
            "Accounting",
            "Aerospace",
            "ApplicationMobileDevelopment",
            "ArchitecturalEngineeringAndSurveying",
            "Automotive",
            "BackendOffice",
            "Beauty",
            "BooksMagazines",
            "CallCenter",
            "Chemicals",
            "CleaningAndMaintenance",
            "Clothing",
            "ComputerProgramming",
            "Consulting",
            "CustomsAndPort",
            "DesignAndMedia",
            "Distribution",
            "ECommerce",
            "Electronics",
            "Export",
            "ForeignExchange",
            "FreightForwarding",
            "GeneralMerchandise",
            "HealthAndBeauty",
            "Household",
            "HumanResources",
            "Images",
            "Import",
            "IndustrialSupplies",
            "Infrastructure",
            "Investments",
            "Jewelry",
            "Legal",
            "Logistics",
            "MarketingAndAdvertising",
            "Multimedia",
            "Music",
            "Networking",
            "Other",
            "Packaging",
            "PaymentsMoneyServicesAndRemittances",
            "Professional",
            "PropertyManagement",
            "ProtectiveAndSecurity",
            "Repair",
            "Sales",
            "SalesAndLeadGeneration",
            "Security",
            "Semiconductors",
            "ShippingAndCourier",
            "SoftwareAsAService",
            "TradeBrokerage",
            "TurnkeySolutions",
            "Video",
            "VirtualAssistants",
            "Warehousing",
            "WebDevelopmentAndDesign",
            "WebDevelopmentAndProgramming",
            "Writing"
          ]
        },
        "taxIdNumber": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Association",
            "Cooperative",
            "Corporation",
            "Company",
            "ForeignCompany",
            "GeneralPartnership",
            "JointVenture",
            "LimitedCompany",
            "LimitedPartnership",
            "NonProfit",
            "Partnership",
            "PublicCompany",
            "Trust",
            "UnlimitedCompany"
          ]
        },
        "websiteUrl": {
          "type": "string"
        }
      }
    },
    "Iterable«AccountEmail»": {
      "type": "object"
    },
    "UpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "confirmPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Iterable«AccountFeatureMap»": {
      "type": "object"
    },
    "ExternalBankConnectRequest": {
      "type": "object",
      "properties": {
        "accountRefId": {
          "type": "string"
        },
        "onboarding": {
          "type": "boolean"
        },
        "publicToken": {
          "type": "string"
        }
      }
    },
    "TransactionsResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "new_access_token": {
          "type": "string"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        }
      }
    },
    "Coordinates": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double"
        },
        "lon": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Iterable«AccountAddress»": {
      "type": "object"
    },
    "AccountVerificationActionsResponse": {
      "type": "object",
      "properties": {
        "canVerify": {
          "type": "boolean"
        },
        "levels": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "One",
              "Two",
              "Three",
              "Custom"
            ]
          }
        },
        "unverifyReasons": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PROFILE_CHANGED",
              "TRANSACTION_LIMIT_REACHED"
            ]
          }
        }
      }
    },
    "NoAccountInfo": {
      "type": "object",
      "properties": {
        "accountType": {
          "type": "string",
          "enum": [
            "Incomplete",
            "Business",
            "Personal"
          ]
        },
        "bank": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "business": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "email": {
          "type": "string"
        },
        "encryptedBank": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "hashId": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isoCountryCode": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "AC",
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AN",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BU",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CP",
            "CR",
            "CS",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DG",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EA",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "EU",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "FX",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "IC",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NT",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SF",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SU",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TA",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TP",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UK",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "XK",
            "YE",
            "YT",
            "YU",
            "ZA",
            "ZM",
            "ZR",
            "ZW"
          ]
        },
        "lastName": {
          "type": "string"
        },
        "salt": {
          "type": "string"
        },
        "showBankInfo": {
          "type": "boolean"
        },
        "showBusinessAddress": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DateTimeZone": {
      "type": "object",
      "properties": {
        "fixed": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "AccountExtraBusiness": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "avgTxnSize": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "industry": {
          "type": "string",
          "enum": [
            "ArtsCraftsCollectibles",
            "BabyAndChildren",
            "BusinessProcessOutsourcing",
            "ClothingAccessoriesShoes",
            "Construction",
            "DigitalGoods",
            "Educational",
            "EntertainmentAndMedia",
            "Events",
            "Financial",
            "FoodAndBeverage",
            "Government",
            "HealthAndBeauty",
            "ITWebAndInternet",
            "Insurance",
            "Manufacturing",
            "Maritime",
            "Medical",
            "Memberships",
            "Music",
            "Networking",
            "NonProfit",
            "PetsAndAnimals",
            "PrintingAndPublishing",
            "RealEstate",
            "ReligionAndSpirituality",
            "Retail",
            "Services",
            "SportsAndOutdoors",
            "SupplyChain",
            "Telecommunications",
            "Transportation",
            "TravelAndLeisure",
            "Utilities",
            "Wholesale"
          ]
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "subIndustry": {
          "type": "string",
          "enum": [
            "Accessories",
            "Accounting",
            "Aerospace",
            "ApplicationMobileDevelopment",
            "ArchitecturalEngineeringAndSurveying",
            "Automotive",
            "BackendOffice",
            "Beauty",
            "BooksMagazines",
            "CallCenter",
            "Chemicals",
            "CleaningAndMaintenance",
            "Clothing",
            "ComputerProgramming",
            "Consulting",
            "CustomsAndPort",
            "DesignAndMedia",
            "Distribution",
            "ECommerce",
            "Electronics",
            "Export",
            "ForeignExchange",
            "FreightForwarding",
            "GeneralMerchandise",
            "HealthAndBeauty",
            "Household",
            "HumanResources",
            "Images",
            "Import",
            "IndustrialSupplies",
            "Infrastructure",
            "Investments",
            "Jewelry",
            "Legal",
            "Logistics",
            "MarketingAndAdvertising",
            "Multimedia",
            "Music",
            "Networking",
            "Other",
            "Packaging",
            "PaymentsMoneyServicesAndRemittances",
            "Professional",
            "PropertyManagement",
            "ProtectiveAndSecurity",
            "Repair",
            "Sales",
            "SalesAndLeadGeneration",
            "Security",
            "Semiconductors",
            "ShippingAndCourier",
            "SoftwareAsAService",
            "TradeBrokerage",
            "TurnkeySolutions",
            "Video",
            "VirtualAssistants",
            "Warehousing",
            "WebDevelopmentAndDesign",
            "WebDevelopmentAndProgramming",
            "Writing"
          ]
        },
        "taxIdNumber": {
          "type": "string"
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Association",
            "Cooperative",
            "Corporation",
            "Company",
            "ForeignCompany",
            "GeneralPartnership",
            "JointVenture",
            "LimitedCompany",
            "LimitedPartnership",
            "NonProfit",
            "Partnership",
            "PublicCompany",
            "Trust",
            "UnlimitedCompany"
          ]
        },
        "websiteUrl": {
          "type": "string"
        }
      }
    },
    "Iterable«BankAccountAddress»": {
      "type": "object"
    },
    "TransactionMeta": {
      "type": "object",
      "properties": {
        "contact": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        }
      }
    },
    "Era": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NewUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewUserAuthorizationRoleRequest"
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "AccountUnverifyRequest": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string",
          "enum": [
            "One",
            "Two",
            "Three",
            "Custom"
          ]
        },
        "note": {
          "type": "string"
        },
        "reason": {
          "type": "string",
          "enum": [
            "PROFILE_CHANGED",
            "TRANSACTION_LIMIT_REACHED"
          ]
        }
      }
    },
    "Iterable«AccountNoteResponse»": {
      "type": "object"
    },
    "AccountGovernmentIdentifier": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "authority": {
          "type": "string"
        },
        "cryptoSalt": {
          "type": "string"
        },
        "govtIdEncrypted": {
          "type": "string"
        },
        "govtIdHash": {
          "type": "string"
        },
        "govtIdLast4": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "DriverLicense",
            "Passport",
            "GovtId"
          ]
        },
        "verificationReason": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "verificationStatus": {
          "type": "string",
          "enum": [
            "Unverified",
            "VerificationInProgress",
            "Verified",
            "CannotBeVerified",
            "NeedMoreInfo"
          ]
        }
      }
    },
    "AlignMonetaryAmount": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BOV",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BYN",
            "BYR",
            "BZD",
            "CAD",
            "CDF",
            "CHE",
            "CHF",
            "CHW",
            "CLF",
            "CLP",
            "CNY",
            "COP",
            "COU",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EGP",
            "ERN",
            "ETB",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MXV",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "RUB",
            "RUR",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SRD",
            "SSP",
            "STD",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRY",
            "TTD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "USN",
            "USS",
            "UYI",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XAG",
            "XAU",
            "XBA",
            "XBB",
            "XBC",
            "XBD",
            "XCD",
            "XDR",
            "XOF",
            "XPD",
            "XPF",
            "XPT",
            "XSU",
            "XTS",
            "XUA",
            "XXX",
            "YER",
            "ZAR",
            "ZMW",
            "ZWL"
          ]
        },
        "number": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "AddressRequest": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "legacyTimeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "SessionResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "linkSuccessful": {
          "type": "boolean"
        },
        "multiAccount": {
          "type": "boolean"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATE_PAYMENT",
              "CREATE_MASS_PAYMENT",
              "CREATE_PAYMENT_PROCESSING_BATCH",
              "CREATE_SETTLEMENT_REPORT",
              "LOGIN_AS",
              "SEND_PAYMENT",
              "UPDATE_ACCOUNT",
              "UPDATE_ACCOUNT_BANK_ACCOUNT",
              "UPDATE_ACCOUNT_CONTACT",
              "UPDATE_ACCOUNT_DOCUMENT",
              "UPDATE_ACCOUNT_PLATFORM_INTEGRATION",
              "UPDATE_ACCOUNT_PRIMARY_CONTACT_USER",
              "UPDATE_ACCOUNT_ROLE",
              "UPDATE_ACCOUNT_VERIFICATION_PRIORITY",
              "UPDATE_ADMIN_ROLE",
              "UPDATE_FEE_TIER",
              "UPDATE_PAYMENT_DOCUMENT",
              "UPDATE_USER",
              "VIEW_ACCOUNT",
              "VIEW_ACCOUNT_BANK_ACCOUNT",
              "VIEW_ACCOUNT_CONTACT",
              "VIEW_ACCOUNT_DOCUMENT",
              "VIEW_ACCOUNT_PLATFORM_INTEGRATION",
              "VIEW_ACCOUNT_ROLE",
              "VIEW_PAYMENT",
              "VIEW_PAYMENT_DOCUMENT",
              "VIEW_USER"
            ]
          }
        },
        "proxyUser": {
          "$ref": "#/definitions/UserResponse"
        },
        "user": {
          "$ref": "#/definitions/UserResponse"
        }
      }
    },
    "DurationField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "precise": {
          "type": "boolean"
        },
        "supported": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/DurationFieldType"
        },
        "unitMillis": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AccountEmailRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "isPrimary": {
          "type": "boolean"
        },
        "legacyTimeCreated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Iterable«UserAuthorizationRole»": {
      "type": "object"
    },
    "UpdateAccountRequest": {
      "type": "object",
      "properties": {
        "businessInfo": {
          "$ref": "#/definitions/AccountExtraBusinessRequest"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "legacyTimeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "personalInfo": {
          "$ref": "#/definitions/AccountExtraPersonalRequest"
        },
        "primaryContactUserId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryEmail": {
          "type": "string"
        },
        "primaryIsoCurrencyCode": {
          "type": "string"
        },
        "primaryPhone": {
          "type": "string"
        },
        "referralInfo": {
          "$ref": "#/definitions/AccountReferralRequest"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "LegacyAccountMapping": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "accountLastUpdate": {
          "type": "string",
          "format": "date-time"
        },
        "addressId": {
          "type": "integer",
          "format": "int64"
        },
        "addressLastUpdate": {
          "type": "string",
          "format": "date-time"
        },
        "bankAccountAddressId": {
          "type": "integer",
          "format": "int64"
        },
        "bankAccountAddressLastUpdate": {
          "type": "string",
          "format": "date-time"
        },
        "bankAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "bankAccountLastUpdate": {
          "type": "string",
          "format": "date-time"
        },
        "emailId": {
          "type": "integer",
          "format": "int64"
        },
        "emailLastUpdate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "memberId": {
          "type": "integer",
          "format": "int64"
        },
        "phoneId": {
          "type": "integer",
          "format": "int64"
        },
        "phoneLastUpdate": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "userLastUpdate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ActivityLogLegacyRequest": {
      "type": "object",
      "properties": {
        "actorAdminId": {
          "type": "integer",
          "format": "int64"
        },
        "actorApiId": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "invoiceId": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "enum": [
            "ACCOUNT_ACTIVATED",
            "ACCOUNT_BANNED",
            "ACCOUNT_CLOSED",
            "ACCOUNT_CREATED",
            "ACCOUNT_DELETED",
            "ACCOUNT_FEATURE_CREATED",
            "ACCOUNT_FEATURE_UPDATED",
            "ACCOUNT_NOTE_CREATED",
            "ACCOUNT_RECOVERY_REQUESTED",
            "ACCOUNT_RECOVERY_SUCCEEDED",
            "ACCOUNT_REOPENED",
            "ACCOUNT_RESEND_ACTIVATION",
            "ACCOUNT_RESTRICTED",
            "ACCOUNT_UNBANNED",
            "ACCOUNT_UNRESTRICTED",
            "ACCOUNT_UPDATED",
            "ADDRESS_CREATED",
            "ADDRESS_DELETED",
            "ADDRESS_UPDATED",
            "AUTHENTICATION_ROLE_ADDED",
            "AUTHENTICATION_ROLE_REMOVED",
            "BANK_ADDRESS_CREATED",
            "BANK_ADDRESS_DELETED",
            "BANK_ADDRESS_UPDATED",
            "BANK_CREATED",
            "BANK_DELETED",
            "BANK_UPDATED",
            "BUSINESS_INFO_CREATED",
            "BUSINESS_INFO_UPDATED",
            "CONTACT_ADDED",
            "CONTACT_REMOVED",
            "CONTACT_UPDATED",
            "EMAIL_CREATED",
            "EMAIL_DELETED",
            "EMAIL_SENT",
            "EMAIL_UPDATED",
            "GOVERNMENT_IDENTIFIER_CREATED",
            "GOVERNMENT_IDENTIFIER_DELETED",
            "GOVERNMENT_IDENTIFIER_UPDATED",
            "INVOICE_CANCELED",
            "INVOICE_CLAIMED",
            "INVOICE_CLONED",
            "INVOICE_CLOSED",
            "INVOICE_CREATED",
            "INVOICE_PAID",
            "INVOICE_PAYMENT_INITIATED",
            "INVOICE_PAYMENT_STATUS_UPDATED",
            "INVOICE_REFUNDED",
            "INVOICE_REMINDED",
            "INVOICE_SENT",
            "INVOICE_UPDATED",
            "LOGIN_FAILED",
            "LOGIN_SUCCEEDED",
            "LOGOUT_SUCCEEDED",
            "NOTIFICATION_EVENT_CREATED",
            "NOTIFICATION_EVENT_UPDATED",
            "ONE_TIME_PASSWORD_SENT",
            "ONE_TIME_PASSWORD_VERIFIED",
            "PASSWORD_CHANGED",
            "PAYMENT_ADJUSTMENT_MADE",
            "PAYMENT_AUTHORIZED",
            "PAYMENT_BATCH_CREATED",
            "PAYMENT_BATCH_JOURNAL_STATUS_UPDATED",
            "PAYMENT_CANCELED",
            "PAYMENT_CLAIMED",
            "PAYMENT_CLONED",
            "PAYMENT_CLOSED",
            "PAYMENT_COMPLETED",
            "PAYMENT_CREATED",
            "PAYMENT_CREDIT_INITIATED",
            "PAYMENT_CREDIT_COMPLETED",
            "PAYMENT_CREDIT_FAILED",
            "PAYMENT_DEBIT_INITIATED",
            "PAYMENT_DEBIT_COMPLETED",
            "PAYMENT_DEBIT_FAILED",
            "PAYMENT_PENDING_AUTH",
            "PAYMENT_PROCESSING_INPROGRESS",
            "PAYMENT_PROCESSING_NOTES_CREATED",
            "PAYMENT_REAUTHORIZE_ATTEMPT",
            "PAYMENT_REFUNDED",
            "PAYMENT_REMINDED",
            "PAYMENT_SENT",
            "PAYMENT_UPDATED",
            "PERSONAL_INFO_CREATED",
            "PERSONAL_INFO_UPDATED",
            "PHONE_CREATED",
            "PHONE_DELETED",
            "PHONE_UPDATED",
            "PREFERENCE_CREATED",
            "PREFERENCE_UPDATED",
            "RISK_PROFILE_UPDATED",
            "USER_ACTIVATED",
            "USER_ADDED",
            "USER_BANNED",
            "USER_CREATED",
            "USER_DELETED",
            "USER_LOCKED",
            "USER_REMOVED",
            "USER_UNBANNED",
            "USER_UNLOCKED",
            "USER_UPDATED",
            "VERIFICATION_DOCUMENT_CREATED",
            "VERIFICATION_DOCUMENT_UPDATED",
            "VERIFICATION_DOCUMENT_UPLOADED",
            "VERIFICATION_DOCUMENT_STATUS_UPDATED",
            "VERIFICATION_LEVEL_UPDATED",
            "VERIFICATION_NOTE_CREATED",
            "VERIFICATION_PROFILE_UPDATED",
            "VERIFICATION_PROCESSOR_CREATED",
            "VERIFICATION_PROCESSOR_CALLED_BACK",
            "VERIFICATION_PROCESSOR_NOT_UPDATED",
            "VERIFICATION_PROCESSOR_UPDATED",
            "VERIFICATION_STATUS_UPDATED",
            "FEETIER_CREATED",
            "FEETIER_UPDATED",
            "FEETIER_DELETED"
          ]
        }
      }
    },
    "AccountContactRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "alias": {
          "type": "string"
        },
        "bank": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "business": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "businessName": {
          "type": "string"
        },
        "contactAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "contactNoAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "dialCode": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "hashId": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isoCountryCode": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "AC",
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AN",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BU",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CP",
            "CR",
            "CS",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DG",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EA",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "EU",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "FX",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "IC",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NT",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SF",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SU",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TA",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TP",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UK",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "XK",
            "YE",
            "YT",
            "YU",
            "ZA",
            "ZM",
            "ZR",
            "ZW"
          ]
        },
        "lastName": {
          "type": "string"
        },
        "legacyTimeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "phoneNumber": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Inactive"
          ]
        }
      }
    },
    "AutowireCapableBeanFactory": {
      "type": "object"
    },
    "AuthorizationRoleBatchRequest": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationRoleRequest"
          }
        }
      }
    },
    "AccountFeatureMap": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "eligible": {
          "type": "boolean"
        },
        "feature": {
          "type": "string",
          "enum": [
            "ExternalBankAccountLinking",
            "QuickBooks",
            "Xero"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "OptOut"
          ]
        }
      }
    },
    "ExternalConnectError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "displayMessage": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "metaInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Iterable«ExternalBankAuthToken»": {
      "type": "object"
    },
    "VerificationChangeRequest": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DurationFieldType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Iterable«AccountResponse»": {
      "type": "object"
    },
    "UserAuthorizationRole": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "role": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AccountPhone": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isPrimary": {
          "type": "boolean"
        },
        "numberDigits": {
          "type": "string"
        },
        "numberUri": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Business",
            "Home",
            "Cell"
          ]
        },
        "verificationReason": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "verificationStatus": {
          "type": "string",
          "enum": [
            "Unverified",
            "VerificationInProgress",
            "Verified",
            "CannotBeVerified",
            "NeedMoreInfo"
          ]
        }
      }
    },
    "AccountGovernmentIdentifierRequest": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string"
        },
        "govtId": {
          "type": "string"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "IsoChronology": {
      "type": "object",
      "properties": {
        "calendarType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "BankAccountResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "accountNickname": {
          "type": "string"
        },
        "accountNumber": {
          "type": "string"
        },
        "accountType": {
          "type": "string",
          "enum": [
            "Checking",
            "Savings"
          ]
        },
        "address": {
          "$ref": "#/definitions/BankAccountAddress"
        },
        "bankName": {
          "type": "string"
        },
        "beneficiaryName": {
          "type": "string"
        },
        "bic": {
          "type": "string"
        },
        "canRemove": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "externalAccountLinked": {
          "type": "boolean"
        },
        "extraInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "iban": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "isoCurrencyCode": {
          "type": "string"
        },
        "routingNumber": {
          "type": "string"
        },
        "shortIdentifierDomestic": {
          "type": "string"
        },
        "shortIdentifierInternational": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "verificationReason": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "verificationStatus": {
          "type": "string",
          "enum": [
            "Unverified",
            "VerificationInProgress",
            "Verified",
            "CannotBeVerified",
            "NeedMoreInfo"
          ]
        }
      }
    },
    "FundingBalance": {
      "type": "object",
      "properties": {
        "available": {
          "$ref": "#/definitions/AlignMonetaryAmount"
        },
        "current": {
          "$ref": "#/definitions/AlignMonetaryAmount"
        }
      }
    },
    "Page«AccountResponse»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AuthenticationResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "authToken": {
          "type": "string"
        },
        "csrfToken": {
          "type": "string"
        },
        "linkSuccessful": {
          "type": "boolean"
        },
        "multiAccount": {
          "type": "boolean"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATE_PAYMENT",
              "CREATE_MASS_PAYMENT",
              "CREATE_PAYMENT_PROCESSING_BATCH",
              "CREATE_SETTLEMENT_REPORT",
              "LOGIN_AS",
              "SEND_PAYMENT",
              "UPDATE_ACCOUNT",
              "UPDATE_ACCOUNT_BANK_ACCOUNT",
              "UPDATE_ACCOUNT_CONTACT",
              "UPDATE_ACCOUNT_DOCUMENT",
              "UPDATE_ACCOUNT_PLATFORM_INTEGRATION",
              "UPDATE_ACCOUNT_PRIMARY_CONTACT_USER",
              "UPDATE_ACCOUNT_ROLE",
              "UPDATE_ACCOUNT_VERIFICATION_PRIORITY",
              "UPDATE_ADMIN_ROLE",
              "UPDATE_FEE_TIER",
              "UPDATE_PAYMENT_DOCUMENT",
              "UPDATE_USER",
              "VIEW_ACCOUNT",
              "VIEW_ACCOUNT_BANK_ACCOUNT",
              "VIEW_ACCOUNT_CONTACT",
              "VIEW_ACCOUNT_DOCUMENT",
              "VIEW_ACCOUNT_PLATFORM_INTEGRATION",
              "VIEW_ACCOUNT_ROLE",
              "VIEW_PAYMENT",
              "VIEW_PAYMENT_DOCUMENT",
              "VIEW_USER"
            ]
          }
        },
        "proxyUser": {
          "$ref": "#/definitions/UserResponse"
        },
        "user": {
          "$ref": "#/definitions/UserResponse"
        }
      }
    },
    "AccountPhoneRequest": {
      "type": "object",
      "properties": {
        "isPrimary": {
          "type": "boolean"
        },
        "legacyTimeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "number": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "AccountVerificationLevelRequest": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string",
          "enum": [
            "One",
            "Two",
            "Three",
            "Custom"
          ]
        },
        "note": {
          "type": "string"
        }
      }
    },
    "Email": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/Domain"
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ExternalBankAccountConnectResponse": {
      "type": "object",
      "properties": {
        "accountNickName": {
          "type": "string"
        },
        "accountNumber": {
          "type": "string"
        },
        "accountType": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/AccountAddress"
        },
        "bankInfo": {
          "$ref": "#/definitions/BankAccountResponse"
        },
        "bankName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "routingNumber": {
          "type": "string"
        }
      }
    },
    "BankAccountAddress": {
      "type": "object",
      "properties": {
        "bankAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "city": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Business",
            "Home"
          ]
        },
        "verificationReason": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "verificationStatus": {
          "type": "string",
          "enum": [
            "Unverified",
            "VerificationInProgress",
            "Verified",
            "CannotBeVerified",
            "NeedMoreInfo"
          ]
        }
      }
    },
    "Iterable«AccountGovernmentIdentifier»": {
      "type": "object"
    },
    "NewUserAuthorizationRoleRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "AccountAddress": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "city": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Business",
            "Home"
          ]
        },
        "verificationReason": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "verificationStatus": {
          "type": "string",
          "enum": [
            "Unverified",
            "VerificationInProgress",
            "Verified",
            "CannotBeVerified",
            "NeedMoreInfo"
          ]
        }
      }
    },
    "Iterable«BankAccountResponse»": {
      "type": "object"
    },
    "SimpleContact": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "businessName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "ApplicationContext": {
      "type": "object",
      "properties": {
        "applicationName": {
          "type": "string"
        },
        "autowireCapableBeanFactory": {
          "$ref": "#/definitions/AutowireCapableBeanFactory"
        },
        "beanDefinitionCount": {
          "type": "integer",
          "format": "int32"
        },
        "beanDefinitionNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "classLoader": {
          "$ref": "#/definitions/ClassLoader"
        },
        "displayName": {
          "type": "string"
        },
        "environment": {
          "$ref": "#/definitions/Environment"
        },
        "id": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/ApplicationContext"
        },
        "parentBeanFactory": {
          "$ref": "#/definitions/BeanFactory"
        },
        "startupDate": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ActivityLogActorRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "ADMIN",
            "API",
            "BATCH",
            "TEST",
            "USER"
          ]
        }
      }
    },
    "AccountUserResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Banned",
            "Deleted",
            "Inactive"
          ]
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Sort": {
      "type": "object"
    },
    "UserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "BankAccountRequest": {
      "type": "object",
      "properties": {
        "accountNickname": {
          "type": "string"
        },
        "accountNumber": {
          "type": "string"
        },
        "accountType": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/AddressRequest"
        },
        "bankAddress": {
          "$ref": "#/definitions/AddressRequest"
        },
        "beneficiaryName": {
          "type": "string"
        },
        "bic": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalAccountDelinkRequired": {
          "type": "boolean"
        },
        "externalAccountLinked": {
          "type": "boolean"
        },
        "extraInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "iban": {
          "type": "string"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "isoCurrencyCode": {
          "type": "string"
        },
        "legacyTimeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "routingNumber": {
          "type": "string"
        }
      }
    },
    "UserRiskProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastDeviceFingerprint": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "lastIp": {
          "type": "string"
        },
        "profile": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Iterable«UserResponse»": {
      "type": "object"
    },
    "AccountNumbers": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "routing": {
          "type": "string"
        },
        "wireRouting": {
          "type": "string"
        }
      }
    },
    "Iterable«AccountContactResponse»": {
      "type": "object"
    },
    "SocialMedialUrl": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "AccountNoteResponse": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "timeCreated": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ActivityLogInfoEnhanced": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "actorId": {
          "type": "string"
        },
        "actorName": {
          "type": "string"
        },
        "actorProxyId": {
          "type": "string"
        },
        "actorProxyName": {
          "type": "string"
        },
        "actorProxyType": {
          "type": "string"
        },
        "actorType": {
          "type": "string"
        },
        "data": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "legacy": {
          "type": "boolean"
        },
        "targetId": {
          "type": "string"
        },
        "targetType": {
          "type": "string"
        },
        "timeCreatedMSec": {
          "type": "integer",
          "format": "int64"
        },
        "timeCreatedMSecUniqueSuffix": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Score": {
      "type": "object",
      "properties": {
        "detail": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          }
        },
        "master": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "AccountMeta": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "number": {
          "type": "string"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "_account": {
          "type": "string"
        },
        "_entity": {
          "type": "string"
        },
        "_id": {
          "type": "string"
        },
        "_pendingTransaction": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "category": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category_id": {
          "type": "string"
        },
        "date": {
          "$ref": "#/definitions/LocalDate"
        },
        "meta": {
          "$ref": "#/definitions/TransactionMeta"
        },
        "name": {
          "type": "string"
        },
        "original_description": {
          "type": "string"
        },
        "pending": {
          "type": "boolean"
        },
        "score": {
          "$ref": "#/definitions/Score"
        },
        "type": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PublicAccountResponse": {
      "type": "object",
      "properties": {
        "businessName": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string"
        },
        "legacyId": {
          "type": "integer",
          "format": "int64"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "RedirectView": {
      "type": "object",
      "properties": {
        "applicationContext": {
          "$ref": "#/definitions/ApplicationContext"
        },
        "attributesMap": {
          "type": "object"
        },
        "beanName": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "exposePathVariables": {
          "type": "boolean"
        },
        "hosts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "propagateQueryProperties": {
          "type": "boolean"
        },
        "redirectView": {
          "type": "boolean"
        },
        "requestContextAttribute": {
          "type": "string"
        },
        "staticAttributes": {
          "type": "object"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "DateTimeFieldType": {
      "type": "object",
      "properties": {
        "durationType": {
          "$ref": "#/definitions/DurationFieldType"
        },
        "name": {
          "type": "string"
        },
        "rangeDurationType": {
          "$ref": "#/definitions/DurationFieldType"
        }
      }
    },
    "Environment": {
      "type": "object",
      "properties": {
        "activeProfiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultProfiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AccountResponse": {
      "type": "object",
      "properties": {
        "businessInfo": {
          "$ref": "#/definitions/AccountExtraBusiness"
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "extraId": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "legacyId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "personalInfo": {
          "$ref": "#/definitions/AccountExtraPersonal"
        },
        "primaryContactUserId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryEmail": {
          "type": "string"
        },
        "primaryIsoCurrencyCode": {
          "type": "string"
        },
        "primaryPhone": {
          "type": "string"
        },
        "primaryPhoneCountryCode": {
          "type": "string"
        },
        "referralInfo": {
          "$ref": "#/definitions/AccountReferralInfo"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Banned",
            "Closed",
            "Inactive",
            "Restricted"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Incomplete",
            "Business",
            "Personal"
          ]
        },
        "verificationLevel": {
          "type": "string",
          "enum": [
            "One",
            "Two",
            "Three",
            "Custom"
          ]
        },
        "verificationProfile": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "verificationStatus": {
          "type": "string",
          "enum": [
            "UnverifiedProfile",
            "UnverifiedSignup",
            "UnverifiedTransactionLimit",
            "Verified"
          ]
        }
      }
    },
    "Domain": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "riskInfo": {
          "type": "string"
        },
        "riskLevel": {
          "type": "string"
        }
      }
    },
    "Balance": {
      "type": "object",
      "properties": {
        "available": {
          "type": "number",
          "format": "double"
        },
        "current": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ActivityLogActor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "proxyId": {
          "type": "string"
        },
        "proxyType": {
          "type": "string",
          "enum": [
            "ADMIN",
            "API",
            "BATCH",
            "TEST",
            "USER"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "ADMIN",
            "API",
            "BATCH",
            "TEST",
            "USER"
          ]
        }
      }
    },
    "AccountReferralInfo": {
      "type": "object",
      "properties": {
        "aid": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "contactId": {
          "type": "string"
        },
        "gaClientId": {
          "type": "string"
        },
        "invoiceId": {
          "type": "string"
        },
        "kid": {
          "type": "string"
        },
        "linkToken": {
          "type": "string"
        },
        "paymentId": {
          "type": "string"
        },
        "pid": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        }
      }
    },
    "ActivityLogRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "actorId": {
          "type": "string"
        },
        "actorProxyId": {
          "type": "string"
        },
        "actorProxyType": {
          "type": "string",
          "enum": [
            "ADMIN",
            "API",
            "BATCH",
            "TEST",
            "USER"
          ]
        },
        "actorType": {
          "type": "string",
          "enum": [
            "ADMIN",
            "API",
            "BATCH",
            "TEST",
            "USER"
          ]
        },
        "data": {
          "type": "string"
        },
        "targetId": {
          "type": "string"
        },
        "targetType": {
          "type": "string",
          "enum": [
            "ACCOUNT",
            "INVOICE",
            "USER",
            "VERIFICATION_PROCESSOR",
            "PAYMENT_BATCH",
            "FEETIER"
          ]
        },
        "timeCreatedMsec": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "enum": [
            "ACCOUNT_ACTIVATED",
            "ACCOUNT_BANNED",
            "ACCOUNT_CLOSED",
            "ACCOUNT_CREATED",
            "ACCOUNT_DELETED",
            "ACCOUNT_FEATURE_CREATED",
            "ACCOUNT_FEATURE_UPDATED",
            "ACCOUNT_NOTE_CREATED",
            "ACCOUNT_RECOVERY_REQUESTED",
            "ACCOUNT_RECOVERY_SUCCEEDED",
            "ACCOUNT_REOPENED",
            "ACCOUNT_RESEND_ACTIVATION",
            "ACCOUNT_RESTRICTED",
            "ACCOUNT_UNBANNED",
            "ACCOUNT_UNRESTRICTED",
            "ACCOUNT_UPDATED",
            "ADDRESS_CREATED",
            "ADDRESS_DELETED",
            "ADDRESS_UPDATED",
            "AUTHENTICATION_ROLE_ADDED",
            "AUTHENTICATION_ROLE_REMOVED",
            "BANK_ADDRESS_CREATED",
            "BANK_ADDRESS_DELETED",
            "BANK_ADDRESS_UPDATED",
            "BANK_CREATED",
            "BANK_DELETED",
            "BANK_UPDATED",
            "BUSINESS_INFO_CREATED",
            "BUSINESS_INFO_UPDATED",
            "CONTACT_ADDED",
            "CONTACT_REMOVED",
            "CONTACT_UPDATED",
            "EMAIL_CREATED",
            "EMAIL_DELETED",
            "EMAIL_SENT",
            "EMAIL_UPDATED",
            "GOVERNMENT_IDENTIFIER_CREATED",
            "GOVERNMENT_IDENTIFIER_DELETED",
            "GOVERNMENT_IDENTIFIER_UPDATED",
            "INVOICE_CANCELED",
            "INVOICE_CLAIMED",
            "INVOICE_CLONED",
            "INVOICE_CLOSED",
            "INVOICE_CREATED",
            "INVOICE_PAID",
            "INVOICE_PAYMENT_INITIATED",
            "INVOICE_PAYMENT_STATUS_UPDATED",
            "INVOICE_REFUNDED",
            "INVOICE_REMINDED",
            "INVOICE_SENT",
            "INVOICE_UPDATED",
            "LOGIN_FAILED",
            "LOGIN_SUCCEEDED",
            "LOGOUT_SUCCEEDED",
            "NOTIFICATION_EVENT_CREATED",
            "NOTIFICATION_EVENT_UPDATED",
            "ONE_TIME_PASSWORD_SENT",
            "ONE_TIME_PASSWORD_VERIFIED",
            "PASSWORD_CHANGED",
            "PAYMENT_ADJUSTMENT_MADE",
            "PAYMENT_AUTHORIZED",
            "PAYMENT_BATCH_CREATED",
            "PAYMENT_BATCH_JOURNAL_STATUS_UPDATED",
            "PAYMENT_CANCELED",
            "PAYMENT_CLAIMED",
            "PAYMENT_CLONED",
            "PAYMENT_CLOSED",
            "PAYMENT_COMPLETED",
            "PAYMENT_CREATED",
            "PAYMENT_CREDIT_INITIATED",
            "PAYMENT_CREDIT_COMPLETED",
            "PAYMENT_CREDIT_FAILED",
            "PAYMENT_DEBIT_INITIATED",
            "PAYMENT_DEBIT_COMPLETED",
            "PAYMENT_DEBIT_FAILED",
            "PAYMENT_PENDING_AUTH",
            "PAYMENT_PROCESSING_INPROGRESS",
            "PAYMENT_PROCESSING_NOTES_CREATED",
            "PAYMENT_REAUTHORIZE_ATTEMPT",
            "PAYMENT_REFUNDED",
            "PAYMENT_REMINDED",
            "PAYMENT_SENT",
            "PAYMENT_UPDATED",
            "PERSONAL_INFO_CREATED",
            "PERSONAL_INFO_UPDATED",
            "PHONE_CREATED",
            "PHONE_DELETED",
            "PHONE_UPDATED",
            "PREFERENCE_CREATED",
            "PREFERENCE_UPDATED",
            "RISK_PROFILE_UPDATED",
            "USER_ACTIVATED",
            "USER_ADDED",
            "USER_BANNED",
            "USER_CREATED",
            "USER_DELETED",
            "USER_LOCKED",
            "USER_REMOVED",
            "USER_UNBANNED",
            "USER_UNLOCKED",
            "USER_UPDATED",
            "VERIFICATION_DOCUMENT_CREATED",
            "VERIFICATION_DOCUMENT_UPDATED",
            "VERIFICATION_DOCUMENT_UPLOADED",
            "VERIFICATION_DOCUMENT_STATUS_UPDATED",
            "VERIFICATION_LEVEL_UPDATED",
            "VERIFICATION_NOTE_CREATED",
            "VERIFICATION_PROFILE_UPDATED",
            "VERIFICATION_PROCESSOR_CREATED",
            "VERIFICATION_PROCESSOR_CALLED_BACK",
            "VERIFICATION_PROCESSOR_NOT_UPDATED",
            "VERIFICATION_PROCESSOR_UPDATED",
            "VERIFICATION_STATUS_UPDATED",
            "FEETIER_CREATED",
            "FEETIER_UPDATED",
            "FEETIER_DELETED"
          ]
        }
      }
    },
    "Risk": {
      "type": "object",
      "properties": {
        "advice": {
          "type": "string"
        },
        "fraudType": {
          "type": "string"
        },
        "fraudTypeSourceIndustry": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "UserAccountResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Banned",
            "Closed",
            "Inactive",
            "Restricted"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "Incomplete",
            "Business",
            "Personal"
          ]
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ActivityLogListEnhancedResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogInfoEnhanced"
          }
        },
        "lastEvaluatedKey": {
          "type": "object"
        }
      }
    },
    "BeanFactory": {
      "type": "object"
    },
    "ClassLoader": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/ClassLoader"
        }
      }
    },
    "Chronology": {
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/DateTimeZone"
        }
      }
    },
    "AuthenticationRequest": {
      "type": "object",
      "properties": {
        "dfp": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "VerificationNote": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "commenter": {
          "type": "string"
        },
        "timeCreated": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ActivateUserRequest": {
      "type": "object",
      "properties": {
        "confirmPassword": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "AuthorizationRoleRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "action": {
          "type": "string",
          "enum": [
            "ADD",
            "REMOVE"
          ]
        },
        "role": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "AccountEmail": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isPrimary": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "verificationReason": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "verificationStatus": {
          "type": "string",
          "enum": [
            "Unverified",
            "VerificationInProgress",
            "Verified",
            "CannotBeVerified",
            "NeedMoreInfo"
          ]
        }
      }
    },
    "AccountContactResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "alias": {
          "type": "string"
        },
        "bank": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "business": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "businessName": {
          "type": "string"
        },
        "contactAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "contactNoAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "dialCode": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "hashId": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isoCountryCode": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "AC",
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AN",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BU",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CP",
            "CR",
            "CS",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DG",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EA",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "EU",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "FX",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "IC",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NT",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SF",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SU",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TA",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TP",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UK",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "XK",
            "YE",
            "YT",
            "YU",
            "ZA",
            "ZM",
            "ZR",
            "ZW"
          ]
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Invited",
            "PaymentReady",
            "SignedUp"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NewAccountRequest": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/AddressRequest"
        },
        "businessInfo": {
          "$ref": "#/definitions/AccountExtraBusinessRequest"
        },
        "email": {
          "$ref": "#/definitions/AccountEmailRequest"
        },
        "isoCountryCode": {
          "type": "string"
        },
        "legacyTimeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "personalInfo": {
          "$ref": "#/definitions/AccountExtraPersonalRequest"
        },
        "phone": {
          "$ref": "#/definitions/AccountPhoneRequest"
        },
        "primaryContactUserId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryIsoCurrencyCode": {
          "type": "string"
        },
        "referralInfo": {
          "$ref": "#/definitions/AccountReferralRequest"
        },
        "type": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/NewUserRequest"
        }
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "company": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email": {
          "$ref": "#/definitions/Email"
        },
        "firstName": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "isLocked": {
          "type": "boolean"
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "risk": {
          "$ref": "#/definitions/Risk"
        },
        "socialMediaUrls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialMedialUrl"
          }
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isLocked": {
          "type": "boolean"
        },
        "lastName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Banned",
            "Deleted",
            "Inactive"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Iterable«AccountPreference»": {
      "type": "object"
    },
    "NoteRequest": {
      "type": "object",
      "properties": {
        "note": {
          "type": "string"
        }
      }
    },
    "ExternalBankAuthToken": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "bankId": {
          "type": "integer",
          "format": "int64"
        },
        "externalAccountRefId": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "InActive"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "tokenExpiry": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AccountExtraPersonalRequest": {
      "type": "object",
      "properties": {
        "dob": {
          "$ref": "#/definitions/LocalDate"
        },
        "firstName": {
          "type": "string"
        },
        "individualIdNumber": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "legacyTimeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "middleName": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Contractor",
            "SoleProprietorship"
          ]
        }
      }
    },
    "AccountPreference": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "preferenceJSON": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "preferenceType": {
          "type": "string",
          "enum": [
            "Language",
            "Notification",
            "Payment",
            "Security",
            "Platform"
          ]
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AccountExtraPersonal": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "dob": {
          "$ref": "#/definitions/LocalDate"
        },
        "dobMasked": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "individualIdNumber": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Deleted",
            "Inactive",
            "Closed"
          ]
        },
        "taxIdNumber": {
          "type": "string"
        },
        "timeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Contractor",
            "SoleProprietorship"
          ]
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "coordinates": {
          "$ref": "#/definitions/Coordinates"
        },
        "state": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      }
    }
  }
}